<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring框架学习笔记</title>
    <url>/2020/06/18/Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Spring优势：1、方便解耦，简化开发。2、AOP编程支持。3、声明式事务支持。4、方便程序测试。5、方便集成各种优秀框架。6、降低JAVA EE API的使用难度。7、源码是经典学习范例。</p>
<p><img src="https://i.loli.net/2020/06/18/6iDxklsZnSCJpTj.png" alt="1.png"></p>
<p>Bean：在计算机英语中有可重用组件含义。</p>
<p>JavaBean：用java语言编写的可重用组件。</p>
<p>控制反转（Inversion of Control）把创建对象的权利交给框架，包括依赖注入（Dependency Injection）和依赖查找（Dependency Lookup）。</p>
<p>ApplicationContext常用三个实现类：</p>
<p>ClassPathXmlApplicationContext：可以加载类路径下配置文件。</p>
<p>FileSystemXmlApplicationContext：可以加载磁盘任意路径下的配置文件（要有访问权）</p>
<p>AnnotationConfigApplicationContext：用于读取注解创建容器。</p>
<p>核心容器的两个接口引发出的问题：</p>
<p>ApplicationContext：在构建核心容器时，创建对象采用的策略是立即加载方式（单例对象适用）</p>
<p>BeanFactory：在构建核心容器时，创建对象采用的策略是延迟加载方式（多例对象使用）</p>
<p>创建Bean的三种方式：</p>
<p>第一种：使用默认函数构造</p>
<p>在spring中使用bean标签，配置id和class属性后，且没配其它属性和标签时，采用的就是默认函数构建bean对象，如果类中没有默认构造函数，则对象无法创建。</p>
<p>第二种：使用普通工厂中的方法创建对象（使用某个类的方法创建对象，并存入spring容器）</p>
<p>第三种:使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）</p>
<p>bean的作用范围：</p>
<p> scope属性：</p>
<p> singleton 单例（默认值）</p>
<p> prototype 多例</p>
<p> request 作用于web应用的请求范围</p>
<p> session 作用于web应用的会话范围</p>
<p> global-session 作用于集群环境的会话范围</p>
<p>bean对象的生命周期：</p>
<p> 单例：</p>
<p>出生：容器创建时</p>
<p>活着：容器在，对象就活着</p>
<p>死亡：容器销毁，对象消亡</p>
<p>总结：单例对象的生命周期和容器相同。</p>
<p> 多例：</p>
<p>出生：使用对象时spring框架创建</p>
<p>活着：对象使用过程中，一直活着</p>
<p>死亡：当对象长时间不用，且没有别的对象引用时，GC回收</p>
<p>依赖注入：</p>
<p>能注入的数据，有三类：</p>
<p>1、基本类型和String</p>
<p>2、其他bean类型（配置文件或注解配置过的bean）</p>
<p>3、复杂类型/集合类型</p>
<p> 注入方式，有三种：</p>
<p>1、使用构造函数提供</p>
<p>2、使用set方法提供</p>
<p>3、使用注解提供</p>
<p>1、标签中的属性：</p>
<p>type:用于指定要注入的数据类型</p>
<p>index:用于指定要注入的数据给构造函数中指定索引位置参数赋值</p>
<p>name:用于指定给构造函数中指定名称的参数赋值</p>
<p>value:用于提供基本类型和Sring类型数据</p>
<p>ref:用于知道你个其他bean类型数据。它指的就是在spring的ioc容器中出现过的bean对象</p>
<p>2、set方法注入</p>
<p>涉及的标签：property</p>
<p>出现的位置：bean标签内部</p>
<p>标签的属性：</p>
<p> name：于指定注入时所调用的方法名称</p>
<p> value：用于提供基本数据类型和String类型的数据</p>
<p>ref：用于指定其他bean数据，它指的就是在spring的ioc容器中出现过的bean对象</p>
<p>3、复杂类型的注入/集合注入</p>
<p>用于给List构集合注入的标签：</p>
<p> list array set</p>
<p>用于给Map结构集合注入的标签：</p>
<p> map props</p>
<p>注解:</p>
<p> 注解创建对象：</p>
<p>@Component：把当前类对象存入spring容器中，属性value指定bean的id</p>
<p>@Controller：一般用于表现层</p>
<p>@Service：一般用于业务层</p>
<p>@Repository：一般用于持久层</p>
<p> 用于注入数据：</p>
<p> @Autowired：自动按照类型注入，只要容器中有唯一一个bean对象类型 和要注入的变量类型匹配，就可以成功注入。出现位置可以是成员变量 和方法等。</p>
<p> @Qualifier：在按照类型注入的基础上，再按照名称注入，它在给类成 注入时不能单独使用，但是在方法参数注入时可以单独使用。</p>
<p> @Resource：直接按照bean的id注入，可以独立使用。属性name用于 指定bean的id。</p>
<p> @Value：用于注入基本类型和String类型数据，属性value用于指定数 据的值，可以使用spring的SpEL表达式。</p>
<p> 用于改变作用范围的：</p>
<p>@Scope：用于指定bean的作用范围，属性value指定范围的取值，singleton、prototype。</p>
<p> 和生命周期相关：</p>
<p> @PreDestroy：指定销毁方法</p>
<p> @PostConstruct：指定初始化方法</p>
<p>用于配置：</p>
<p>@Configuration：指定当前类是一个配置类，细节当配置类作为AnnotationConfigApplicationContext对象创建的参数时，可以不写</p>
<p> @ComponentScan：用于通过注解指定spring在创建容器是要扫描的包</p>
<p> @Bean：用于把当前方法的返回值作为bean对象存入spring的ioc容器 属性name用于指定bean的id，不写时默认是方法名</p>
<p> @Import：导入其它配置类，小配置类导入主配置类，属性value指定其 它配置类的字节码</p>
<p>@PropertySource：用于指定properties，属性value指定文件名称和<br>路径，关键字classpath表示类路径下</p>
<p>动态代理：</p>
<p> 特点：字节码谁用谁创建，谁用谁加载</p>
<p> 作用：不修改源码的基础上对方法增强</p>
<p> 分类：基于接口的动态代理、基于子类的动态代理</p>
<p> 基于接口的动态代理：</p>
<p> 使用Proxy类中的newProxyInstance方法</p>
<p> newProxyInstance方法参数：</p>
<p> ClassLoader：类加载器,用于加载代理对象字节码，和被代理对象使用 相同的类加载器</p>
<p> Class[]:字节码数组，让代理对象和被代理对象具有相同的方法</p>
<p> InvocationHandler:用于提供增强的代码，写如何代理，通常都是匿名 内部类</p>
<p> invoke方法参数：</p>
<p> proxy：代理对象的引用</p>
<p> method：当前执行的方法</p>
<p> args：当前执行方法所需的参数   </p>
<p> 基于子类的动态代理：</p>
<p> 使用Enhancer类中的create方法</p>
<p> Create方法的参数：</p>
<p> Class：字节码，指定被代理对象的字节码</p>
<p>Callback：用于增强代码，一般是写该接口的子接口实现类</p>
<p>MethodInterceptor，通常是匿名内部类</p>
<p>Intercept方法参数:</p>
<p> proxy: 代理对象的引用</p>
<p> method：当前执行的方法</p>
<p> objects：当前执行方法所需的参数</p>
<p> methodProxy:当前执行方法的代理对象</p>
<p>AOP：Aspect Oriented Programming，面向切面编程</p>
<p>优势：减少重复代码，提高开发效率，方便维护</p>
<p>术语：</p>
<p> Joinpoint(连接点)：被拦截到的点，这些点指的是方法</p>
<p> Pointcut：切入点指我们对哪些Joinpoint进行拦截定义</p>
<p> Advice(通知/增强)：通知是指拦截到Joinpoint之后所要做的事情，前置 通知，后置通知，异常通知，最终通知，环绕通知</p>
<p> Target(目标对象)：代理的目标对象</p>
<p> Weaving(织入)：把增强应用到目标对象来创建新的代理对象的过程</p>
<p> Proxy(代理):一个类被AOP织入增强后，就参生一个结果代理类</p>
<p> Aspect(切面)：是切入点和通知的结合</p>
<p>Spring中基于xml的AOP配置：</p>
<p>1、把通知bean交给spring管理</p>
<p>2、使用aop：config标签表明开始aop配置</p>
<p>3、使用aop：aspect标签表明配置切面</p>
<p>id属性：是给切面提供一个唯一表示</p>
<p>ref属性：是指定通知类bean的id</p>
<p>4、在aop：aspect标签内部使用对应标签来配置通知类型</p>
<p>method属性：用于指定通知方法</p>
<p>pointcut属性：用于指定切入点表达式，该表达式的含义指的是业务层中哪  些方法被增强</p>
<p>切入点表示式写法：</p>
<p> 关键字：execution</p>
<p> 表达式：</p>
<p> 访问修饰符 返回值 包名.包名.包名…类名.方法名(参数列表)</p>
<p> 全通配写法：</p>
<p><em>**..</em>.*(..)<br>前两个星号中间有空格</p>
<p>Spring中基于xml的声明式事务控制配置步骤</p>
<ol>
<li><p>配置事务管理器</p>
</li>
<li><p>配置事务的通知</p>
</li>
</ol>
<p>使用标签配置事务通知</p>
<p>属性：</p>
<p>id：给事务通知起一个唯一标识</p>
<p>transaction-manager：给事务通知提供一个事务管理器的引用</p>
<p>3．配置AOP中的通用切入点表达式</p>
<p>4.简历事务通知和切入点表达式的对应关系</p>
<p>5.配置事务的属性</p>
<p> 在标签内部</p>
<p> 属性：</p>
<p> isolation：指定事务的隔离级别，默认是DEFAULT,表示数据库隔离级别</p>
<p> propagation：指定事务传播行为，默认是REQUIRED,增删改的选择，查询方 法可以选择SUPPORTS</p>
<p> read-only：指定事务是否只读，只有查询方法才能设置true，默认值false 表示读写</p>
<p> timeout：指定事务超时时间，默认是-1，表示永不超时，单位是秒</p>
<p> rollback-for：指定一个异常，产生该异常时，事务回滚。产生其它异常时， 事务不回滚。没有默认值，表示任何异常都回滚</p>
<p> no-rollback-for：指定一个异常，产生该异常时，事务不回滚。产生其它 异常时，事务回滚。没有默认值，表示任何异常都回滚。</p>
<p> 注解：</p>
<p>@Transactional：开启事务注解</p>
<p>@EnableTransactionManagemet：开启配置类事务注解支持</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>笔记</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA多线程笔记</title>
    <url>/2020/06/18/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>线程的生命周期：</p>
<p><img src="https://i.loli.net/2020/06/18/2KfBTbIHuWpYMA5.png" alt="1.png"></p>
<p>（new）新建（start）–&gt;就绪&lt;–(sleep时间到)阻塞&lt;–(sleep,suspend)运行(stop,执行完)–&gt;死亡。</p>
<p>Object和Condition休眠唤醒：</p>
<p>Object：wait()和notify()必须在synchronized（同步锁）下使用</p>
<p>Condition：await()和signal()必须在Lock（互斥锁/共享锁）配合使用</p>
<p>线程通讯：</p>
<p>CountDownLatch：1个线程等待多个线程执行完毕后再执行（教练等待3个运动员做好准备）</p>
<p>CyclicBarrier：多个线程等待到同一状态后，在同一时刻一起执行（3人同时起跑）</p>
<p>Semaphore：用于控制对某组资源的访问（8人使用3台机器）</p>
<p><img src="https://i.loli.net/2020/06/18/wNyma1ovBCAPcHu.png" alt="2.png"></p>
<p>JAVA内存模型：</p>
<p><img src="https://i.loli.net/2020/06/18/h59AIf8cyzj6eZK.png" alt="3.png"></p>
<p><img src="https://i.loli.net/2020/06/18/MI7PukYXl4WvVGh.png" alt="4.png"></p>
<p>JAVA栈：</p>
<p>每个线程会对应一个JAVA栈</p>
<p>每个JAVA栈由若干个栈帧组成</p>
<p>每个方法对应一个栈帧</p>
<p>线程请求的栈深度大于虚拟机所允许的深度时，将抛出StackOverflowError</p>
<p>栈扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常</p>
<p>栈顶的栈帧为活动栈，表示当前执行的方法</p>
<p>方法区：</p>
<p>方法区是Java堆的永久区</p>
<p>方法去存放要加载的类信息、类中的静态常量、定义为final的常量、类中field信息、类中方法信息</p>
<p>方法去是被java线程共享的</p>
<p>常量池：</p>
<p>是方法区的一部分</p>
<p>常量池存放两类数据：字面量（字符串，final变量）和引用量（类/接口、方法和字段名称）</p>
<p>多线程特型：原子性、可见性、有序性</p>
<p>ThreadLocal、CAS</p>
<p>CAS存在ABA问题</p>
<p>锁：</p>
<p>不可重入锁：线程请求它已经拥有的锁时会阻塞</p>
<p>可重入锁：线程可以进入它已经拥有的锁的同步代码块（ReentrantLock）</p>
<p>读写锁：可以同时读，读的时候不能写。不能同时写，写的时候不能读(ReentrantReadWriteLock)</p>
<p>Volatile关键字：</p>
<p>状态量标记</p>
<p>双重校验</p>
<p>同步类容器（线程安全）</p>
<p>Vector、Stack、HashTable（类似HashMap）</p>
<p>Collections类是一个工具类，不同于Collection接口，提供了静态工厂方法来创建同步容器类。</p>
<p>并发容器（线程安全）</p>
<p>ConcurrentHashMap：对应非并发容器：HashMap</p>
<p>CopyOnWriteArraylist：对应非并发容器：ArrayList</p>
<p>CopyOnWriteArraySet：对应非并发容器：HashSet</p>
<p>ConcurrentSkiptMap;对应非并发容器：TreeMap</p>
<p>ConcurrentSkiptSet: 对应非并发容器：TreeSet</p>
<p>ConcurrentLinkQueue: 对应非并发容器：Queue</p>
<p>线程池：</p>
<p>Executors工具类</p>
<p>newCacheThreadPool</p>
<p>newFixedThreadPool</p>
<p>newSingleThreadExecutor</p>
<p>newScheduleThreadPool</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JAVA</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA基础笔记</title>
    <url>/2020/06/12/JAVA%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>面向对象是向现实世界模型的自然延伸，这是一种“万物皆对象”的编程思想。在现实生活中的任何物体都可以归为一类事物，而每一个个体都是一类事物的实例。</p>
<p>Arraylist是可以扩展长度的数组，声明时必须跟上泛型，泛型的内容为引用类型，不能是基本类型。如果需要基本类型，可以用其包装类，int-&gt;Integer，char-&gt;Character。</p>
<p>String变成Char数组用.toCharArray()方法，Arrays.sort();对字符数组进行排序。</p>
<p>重写(Override):方法名称一样，参数列表一样</p>
<p>重载(OverLoad):方法名称一样，参数列表不一样</p>
<p>子类构造方法中有一个默认的super()调用</p>
<p>Super关键字，1、在子类的成员方法中，访问父类成员变量。2、在子类成员方法中访问父类成员方法。3、在子类构造方法中，访问父类的构造方法。</p>
<p>This关键字，1、在本类成员方法中，访问本类成员变量。2、在本类成员方法中，访问本类的另一个成员方法。3、在本类成员方法中，访问本类的另一个构造方法。</p>
<p>Super与This两种构造调用，不能同时使用。</p>
<p>抽象类（Abstract）：1、抽象类的所有抽象方法必须实现，子抽象类可以实现部分抽象方法。2、抽象类里可以没有任何抽象方法。</p>
<p>接口（Interface）：1、是一种公共规范标准,是一种引用数据类型。2、如果实现类没有重写接口中所有的抽象方法，那么这个实现类自己必须是抽象类。3、接口中可以定义常量，必须赋值，必须使用public static final修饰（可以省略）。4、接口没有静态代码块或者构造方法的。5、类与接口之间是多实现的，接口与接口之间是多继承的。</p>
<p>JAVA三大特型：封装、继承、多态。</p>
<p>多态：1、父类引用指向子类对象。2、格式：父类名称 对象名=new 子类名称（）；接口名称 对象名=new 实现类名（）；3、成员方法，编译看左边，运行看右边。成员变量，编译看左边运行看左边。</p>
<p>Final修饰类，成员方法，局部变量，成员。</p>
<p>成员内部类，局部内部类（修饰符不能写），匿名内部类。</p>
<p>匿名内部类：接口名 对象名=new 接口名（）{….实现抽象方法};</p>
<p>包装类，自动装箱和拆箱。parseXxx()，toString(),valueOf();</p>
<p>集合：</p>
<p>List接口1、有序集合。2、允许存储重复元素。3、有索引，可以使用普通for循环遍历。</p>
<p>Set接口1、不允许存储重复元素。2、没有索引，不能使用普通for循环遍历。迭代器iterator接口，增强for循环for（String s : arra）{ };</p>
<p>泛型：泛型通配符？</p>
<p>数据结构：</p>
<p>栈：先进后出（弹夹）</p>
<p>队列：先进先出</p>
<p>数组：查询快（数组的地址是连续的，通过首地址，和索引可以快速找到某一元素），增删慢（数组的长度是固定的，需创建新数组，并把原来数据复制过来）</p>
<p>链表：查询慢（链表中地址不是连续的，都必须从头开始查询），增删快（链表结构增加或删除一个元素对整体没有影响，所以增删快）</p>
<p>树：</p>
<p>List集合：ArrayList、LinkList类似数组和链表</p>
<p>Set集合：</p>
<p>HashSet特点：是一个无序集合，底层是一个哈希表结构（数组+链表/红黑树）（查询很快）。LinkHashSet，底层是哈希表，多了一条链表（记录元素存储顺序）保证元素有序。</p>
<p>哈希值：是一个十进制整数，由系统随机给出（是一个逻辑地址，不是实际物理地址）</p>
<p>可变参数：实际就是传递数组，格式：方法名（数据类型…变量名）1、一个方法的参数列表可变参数只能有一个。2、如果方法的参数有多个，那么可变参数要写在末尾。</p>
<p>Map集合：1、K允许重复V可以重复。2、K,V一一对应</p>
<p>HashMap是一个无序集合，存入和取出的顺序有可能不一致。</p>
<p>LinkedHashMap底层是哈希表+链表，存储和取出元素的顺序是一样的。</p>
<p>HashTable是线程安全的，只能存在非null的键或值</p>
<p>Entry遍历Map增强for循环 for（Map.Entry entry：set）{   enrty.getvalue(); }</p>
<p>哈希冲突：需要重写hashCode方法和equals方法</p>
<p>并发：指两个或多个事件在同一时间段内发生。（交替发生）</p>
<p>并行：指两个或多个事件在同一时刻发生。（同时发生）</p>
<p>进程：系统进程，进程是cpu资源分配的最小单位（火车）</p>
<p>线程：线程是cpu调度的最小单位。（车厢）</p>
<p>Thread类的start方法结果是两个线程并发的运行，当前线程（main线程）和创建的新线程（执行其run方法），多次启动一个线程是非法的，特别是当线程已经结束后，不能在启动。</p>
<p>Cpu抢占调度</p>
<p>Runable接口，好处：1、避免了单继承的局限 2、增强了程序的扩展性，降低了程序的耦合性</p>
<p>匿名内部类，创建线程，简化。</p>
<p>new Thread（new Runable{</p>
<p> @Override</p>
<p> public void run（）{};</p>
<p>}）.start（）;</p>
<p>线程安全：</p>
<p>1、同步代码块：synchronized</p>
<p>Synchronized（锁对象）{</p>
<p> 共享资源代码</p>
<p>}</p>
<p>多线程进入同步代码块拿到锁对象的执行，没拿到锁对象的进入阻塞状态等待锁对象归还，然后执行。</p>
<p>2、同步方法：修饰符 synchronized 返回值类型 方法名（参数列表）{}</p>
<p>同步方法的锁对象是线程实现类即this</p>
<p>2.1、静态同步方法：静态同步方法的锁对象是本类的class属性</p>
<p>3、Lock锁 lock（） 和 unlock（）方法</p>
<p>线程状态：</p>
<p>NEW新建状态，BLOCKED阻塞状态，RUNNABLE运行状态，TERMINATED死亡状态，TIMED_WAITING休眠状态，WAITING永久等待状态。</p>
<p>线程池：线程池工厂类Executors提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池。</p>
<p>Lambda表达式：更简洁。格式：1、一些参数。2、一个箭头。3、一段代码。</p>
<p>递归：直接递归、间接递归</p>
<p>Transient关键字：瞬态关键字  不能被序列化</p>
<p>TCP通信：面向连接的通信，客户端和服务器端必须经过三次握手，建立逻辑连接，才能通信。Socket/ServerSocket</p>
<p>反射:将类的各个组成部分封装成其他对象这就是类的反射机制。</p>
<p>类加载3个阶段：Source源码阶段-&gt;Class类对象阶段-&gt;Runtime运行时阶段。</p>
<p>获取Class对象的方式：1、Class.forName（”全类名”） 2、类名.class 3、对象.getClass()</p>
<p>*同一个字节码文件.class在一次运行的过程中只会被加载一次，不论通过哪种方法获取的class对象都是同一个。</p>
<p>Class对象功能：</p>
<p>1、 获取成员变量</p>
<p>Field[ ] getFields(); 获取所有public修饰的成员变量</p>
<p>Field getfield(String name); 获取指定名称的public成员变量</p>
<p>Field[ ] getDeclaredFields(); 获取所有的成员变量,不考虑修饰符private加.setAccessible(true)</p>
<p>Field getDeclaredField(String name);</p>
<p>2、 获取成员方法</p>
<p>Method[ ] getMethods();</p>
<p>Method[ ] getMethods(String name,类…parmeterTypes);</p>
<p>执行方法：Object invoke(Object obj,Object…args);</p>
<p>…</p>
<p>3、 获取构造方法</p>
<p>Constructor [ ]  getConstructors();</p>
<p>Constructor getConstructor(类…parameterType);</p>
<p>…</p>
<p>创建对象：T newInstance(Object…initargs);</p>
<p>4、 获取类名</p>
<p>String getName();   </p>
<p>注解（Annotation）：</p>
<p>JDK预定义的注解：@Override、@Deprecated（表示该内容已过时）、@SuppressWarnings（压制警告，一般传递参数”all”）</p>
<p>自定义注解：</p>
<p> 格式：</p>
<p>元注解：用于描述注解的注解</p>
<p>@Target：描述注解能够作用的位置</p>
<p> ElementType取值：</p>
<p> Type：类</p>
<p> METHOD：</p>
<p> FIELD：成员变量</p>
<p>@Retention：描述注解能被保留的阶段</p>
<p> RetentionPolicy取值：</p>
<p>  RUNTIME：会被保留到class字节码文件中，被JVM读取到</p>
<p>@Doucumented：描述注解是否被抽取到api文档中</p>
<p>@Inherited：描述注解是否被子类继承</p>
<p> public @interface 注解名称{ }</p>
<p> 本质：注解本质上就是一个接口，改接口默认继续Annotation接口</p>
<p> 属性：接口中可以定义的成员方法</p>
<p> 要求属性的返回值类型：</p>
<p>1、 基本类型</p>
<p>2、 String</p>
<p>3、 枚举</p>
<p>4、 以上类型的数组</p>
<p>定义的属性，在使用时需要给属性赋值（加了default除外）</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JAVA</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>我的大学</title>
    <url>/2020/04/04/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>　　关于大学生活的点滴，回忆，感言。回首依旧能感受到那些美好。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>　　曾说，文字是情感宣泄的出口。是呀，我的大学，包含了难忘的时光，沉甸甸的情感，绞尽脑汁凑满减的外卖，上万行的代码（计算机专业），一同睡懒觉旷课的舍友（手动滑稽），期末一起挑灯夜战的小伙伴，挂了很多人的高树（高数），等等。愿用这篇文字，记录我难以忘怀的情感，时光，伙伴。<br><strong><center>大一</center></strong></p>
<p>　　正如游戏中的术语，萌新（新手）；电脑中的术语，小白。刚进入大学，讲道理，我被闽南师大震撼到了。犹如山炮进城，哇！学校好大，建筑好美，食堂好多，饭菜好多样呀，社团好像很有趣。一切的一切都是崭新的，仿佛河水刚汇聚到大海的那一刻，这片天地好辽阔。然鹅自己也很不成熟，会做错事，会耍脾气，考虑不周，遇事慌张。很感谢，我们的代班学长刘学姐郭。虽然相处的时间不多，但能感受到他们在默默中关心着我们，也为我们抗下了许多重担。  </p>
<p>　　学长刘是个代码大佬，ＡＣＭ队ｂｕｆｆ加成，印象蛮深的是问他一道ＡＣＭ题怎么打的时候，他并没有直接告诉我答案而是用启发的方式告诉我如何思考。  </p>
<p>　　学姐郭成绩优异，人也漂亮。女神啊，哈哈。印象最深的是一次班会发脾气了（原谅我哈哈），现在想想那个时候确实大家都太不懂事了，经常会惹学姐生气。  </p>
<p>　　当然我还碰到了另外四位很重要的学长学姐，李，郭，蔡，张。这四位学姐学姐是我们校就业信息部的部长和副部长了。很幸运能加入这个部门，在一年的部门活动中我成长了。从开始，连excel，word，ppt都不明白怎么用的小白，变成了能熟练使用者三款软件办公，甚至可以制作出精美的ppt。感谢信息部的培训，感谢学长学姐的默默的付出和循循善诱教学。当然在信息部里我还学到了PS偷师from-&gt;PS大神学长张，AE视频剪辑偷师from-&gt;大神学长蔡。在这个部门里我想学到技术是一方面，另一方面是从学长学姐的为人处世方面上学习。很感谢他们带给我们的一切一切。顺带一提，大学一定要参加社团活动哦！  </p>
<p><strong><center>大二</center></strong></p>
<p>　　经过了一年的摸爬滚打，对学校逐渐有了一个完整的认知，也开始了对学校周边天地的扩展。哪里食堂好吃，哪家食堂便宜，志愿时怎么来，尔雅通识课怎么刷，等等大学生活的方方面面已经形成了一个脉络在脑海里。这个时候的传记，不再像大一那样呆萌，脱去了小鲜肉的身份，也有人会喊自己一声学长了。这个时候没有了大一那样备受关照的特殊待遇，但却有了独立生活的能力。  </p>
<p>　　很多人会在这个时候选择兼职，勤工俭学。当然我也不例外，考虑到收入，我选择了家教这一兼职。通过学校的校勤工群(学校的资源是真的丰富)，我找到了第一份正式兼职，同时也遇到了生命中很重要的一个人。她很可爱，是我喜欢的类型，也很可惜我们最终没能走到最后。正如相遇时，我说过的，遇到你，我很幸运，曾经如此，现在亦如此。  </p>
<p>　　大二的时光是我大学四年里最美好和难忘的，有一份收入，有一份爱情，有许多小伙伴，去了不少的地方，欣赏了许多美景，体验了到了生活的五味杂陈。当然大二没好好学习哈哈，到现在大四找工作就深有感受了，以及部门选择去留时，自己因为不够自信，选择了离开，这些是大二的小遗憾。  </p>
<p><strong><center>大三</center></strong></p>
<p>　　大三，这个时候我们摇身一变，老咸鱼直接上线。当然老腊肉也是我们的称呼。经过了前两年的大学时光，这个时候我们已经差不多是个成熟的人了。对于一些问题我们要有自己的见解和独立思考的能力。对于我而言大三的学业不是很重，因为大一大二已经把重难点攻克完了，剩下的是一些专业选修课，和一些必修课，相对而言较轻松。这个时候有需要考证的同学会开始准备，我也在大三拿下了高中信息技术教师资格证和英语六级。  </p>
<p>　　在这个时候我们也开始意识到了，学习是自己的事情，在大学没什么会压着你学习，挂科与否也看自己努力。很多选择和决定权都掌握在了自己手上。有一说一，这种感觉让我有些不适应。曾经我们都一样的上小学、初中、高中，很多选择父母会帮你决定好，很多烦恼我们体会不到，除了学习哈哈。我们开始可以选择自己的人生走向，选择学习或当一只快乐的闲鱼划水，这是我们最宝贵的东西，一旦错过不再拥有。  </p>
<p>　　在这个时候我也收获了珍贵的友谊。部门一年的感情，到大三还经常联系的是两位小伙伴，连某和于某。一起去公园散心，一起喝酒，一起打游戏，一起唠嗑。很感谢他们对我的照顾，部门里关系最铁的两位小伙伴。  </p>
<p>　　于某，很会关心人的一个小伙伴，有组织能力，能考虑到他人感受。有蛮多需要从你身上学习的。  </p>
<p>　　连某，平时话不多，喝完酒话就上来的一个人，大一到大三见证了他的成长，越来越善于沟通的一个人，为人很真诚，可靠。  </p>
<p><strong><center>大四</center></strong> </p>
<p>　　大学的生活正式进入尾声，收官之战即将来到。关于大四，要给一个词来形容的话，我会用迷茫来形容。考研，考公，就业。三大方向，任君挑选。此时我心中最多的就是迷茫，对未来的迷茫，对即将毕业的复杂心情。可能也因为我是个目标不明确的人才会有这种想法吧，我对于生活我的要求并非很高，只是简简单单的希望我和身边的人能够开开心心。  </p>
<p>　　大四学业基本结束，老咸鱼们开始会旷些不重要的课程。也逐渐失去了大一大二的好习惯。这是普遍状况。如果你心怀远方的话，建议别跟风，要有自己的作息和态度。大学收官之战则是毕设了，我运气一直都蛮好的，选到了很不错的毕设导师。也顺顺利利的完成答辩。整个毕设大概花了自己一个月的时间去筹备，通过毕设我发现了自己的知识面的狭窄也get很多新技能。一分耕耘一分收获吧。</p>
<p>　　如果你也迷茫，不要担心，相信自己吧。我曾一直执着于迷茫，但我并没找到答案，或许答案在未来的生活中。怀着对未来的憧憬前行吧。  </p>
<p>　　四年舍友，也是难忘的一页，生日，聚餐，旅游，开黑，互怼，互喷。尽管我们各不相同来自异域他乡，但我们陪伴了对方度过了四年的时光，感谢。  </p>
<p>　　舍友中最有趣的就是陈某，宿舍开心果，情商高，人也很高哈哈，脾气很好，讲话幽默，各种外号满天飞，日常被嘲讽。他是我大学里最佩服的人。  </p>
<p>　　班级里也有许多优秀的人，张某，罗某，江某，林某，解某，等等。张某，我们班的心里委员，很会调节气氛，一语惊人，幽默风趣。罗某班级副团支书，组织力一流，很有风格，麦霸。江某代码大佬，很努力的女孩子，很优秀，奖学金拿来多少呀。林某，我的搭档女学委，贴心，细心，对我也蛮照顾的和你做搭档蛮幸运的。解某，山东人，北方壮汉，直来直往，有义气也有毅力，跟着他我接触到了健身。</p>
<h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>　　大学里的故事还很多，纸短情长故事也长。很感谢大学里遇到的所有人。到了大学明白成绩其实并非唯一，而能力的重要性越发明显，而大学又是锻炼能力的好地方。愿你不断前行拥有更多的能力去保护去爱身边的人，愿还没上大学的你能好好努力。愿大学里的你们都拥有美好未来，和开开心心的每一天。愿已经毕业的你能记得大学的时光是我一生宝贵的财富。</p>
<p>　　</p>
<p>　　</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>大学</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建第一个Hexo个人博客</title>
    <url>/2020/01/16/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>hexo是一款快速、简洁且高效的博客框架。<br>可以理解为容易搭建<br>推荐，适合初次搭建博客，网上关于该博客搭建中遇到问题的解决方案很多。</p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul>
<li>操作系统<br>Windows、Linux、macOS皆可</li>
<li>需要安装的软件<br>Git、Node.js、Hexo</li>
</ul>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><p>分享我跟着搭建博客的视频链接<a href="https://www.bilibili.com/video/av44544186?from=search&seid=8333895135889660269" target="_blank" rel="noopener">CodeSheep</a>，很不错的教学，跟着做就行。<br>视频中的up主是macOS系统，但具体和Windows系统差别不大，有问题可以参考弹幕。</p>
<h2 id="个人经验分享"><a href="#个人经验分享" class="headerlink" title="个人经验分享"></a>个人经验分享</h2><p>个人博客的搭建及完善历程如下：<br><strong>1、安装必要软件</strong><br>软件不大、安装也简单<br>花不了多少时间一般10分钟左右<br><strong>2、博客部署到本地</strong><br>成功后博客就算初步搭建完成，但只能本机访问到博客<br>部署顺利的话10分钟左右<br><strong>3、博客部署到github</strong><br>这个是免费的、成功后外网也能访问了<br>部署顺利的话15分钟左右<br><strong>4、博客主题更换及美化</strong><br>主题很多可以网上下载，主题可以参考这个视频链接<a href="https://www.bilibili.com/video/av74851669?from=search&seid=5835927287329667070" target="_blank" rel="noopener">五款主题</a><br>主题的更换以及美化可以花挺多时间的看你想要做到什么程度了<br><strong>5、注册个人域名</strong><br>可以去腾讯云、阿里云购买域名<br><strong>6、个人域名和博客绑定</strong><br>网上也有教学，不难。</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>序章</title>
    <url>/2020/01/16/%E5%BA%8F%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从0开始搭建博客，到如今着手写第一篇博客，历经了四天的磕磕碰碰。<br>期间出现了不少的问题，深夜探访度娘，浪迹于b站各位大佬的视频。<br>学会了开始去看说明文档，了解了图床、域名等新知识，体验到了拥有博客的小成就感。<br>总的感觉蛮开心的，虽然博客的美化还有不足，自己的文笔也不够优秀，但有了开端，相信以后会越来越好。<br>这篇文章作为第一篇博文，那必须要有其独特之处，一番思考于是决定记录下自己搭建博客的初心、方向、目标。</p>
<h1 id="初心"><a href="#初心" class="headerlink" title="初心"></a>初心</h1><p><strong>分享、学习、成长。</strong>这三个词，是我的搭建博客的初心。<br><strong>分享中提升，学习中成长。</strong>我们无时无刻都在成长的路上，希望我的博客能够伴你我一同成长。</p>
<h1 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h1><p>关于博客以后的写作方向暂定如下：<br>1、技术类（java后端、部分前端、其它奇技淫巧？？）<br>2、随笔类（一些生活中的点点滴滴）<br>3、小白类（一些计算机知识科普）</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>精于心，简于形。<br><img src="https://i.loli.net/2020/01/16/92Z67Tf8YilpOCk.jpg" alt="TIM图片20200116211751.jpg"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>初心</tag>
        <tag>方向</tag>
        <tag>目标</tag>
      </tags>
  </entry>
</search>
