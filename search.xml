<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020.7.26随笔</title>
    <url>/2020/07/27/2020.7.26%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p>2020.7.26，在回厦门的路上。</p>
<p>周五晚我回了德化，因为村里通知要去兵检，刚好来厦门找工作也快二个月了，想回家一趟。</p>
<p>本来想着就当作免费体检走一趟，到了家后，家人灌输了一波思想，第二天早上去体检，又动员了一波思想。大学生入伍2年16w，考公加分，优先入伍等各项优惠政策。我心动了，当兵真香。</p>
<p>体检下来，咳咳体重好尴尬，然后O型腿，视力是硬伤4.0，其它都没大问题。了解的越多也就越知道自己离入伍的差距。其它几个小问题，视力这关我是过不了了。很可惜，我的参军梦，一晚就结束了。</p>
<p>每个热血男儿都有着参军梦，一日为兵，终身无悔。我爸常常和我说，他以前梦想就是去当兵。很可惜，我也无缘当兵。</p>
<p>不过，回来还是有些收获，给自己定了几个小目标。</p>
<p>1，参军有一吸引我的地方就是强身健体，虽然去不了，但是强身健体还是有办法的，明天晚上坚持健身，一周至少一次5km长跑。</p>
<p>2，这次体检的体重，又刺激到我了，咳咳，加餐加餐，早餐必须吃，中午加一餐，晚上夜宵也得安排上，吃和练一起，增肌增重。</p>
<p>3，体态方面，O型腿打算花二个月的时间来矫正，驼背enmmm老对手了，二个月也一起解决ta。</p>
<p>愿持之以恒</p>
<hr>
<hr>
<hr>
<p>写在最后，如果你能看到的话，这些话写给你秋燕。</p>
<p>这几天看了一篇小伙伴的考验知乎文章，加上自己初入社会的经历，蛮有感触的。越努力，越幸运。</p>
<p>你的大学还有1年的时间，不管是考研，考公，工作我都觉得是可行的。当然，现在就得开始准备了。如今奋斗的你，必然给未来的你带来更好的生活。</p>
<p>至于我们之间，彼此都向前看，前进吧。画上一个不完美但却很珍贵的句号，然后去新的一段启航。</p>
<p>重点还是前两段话，真的好好加油！</p>
]]></content>
      <categories>
        <category>随笔类</category>
      </categories>
      <tags>
        <tag>徐</tag>
        <tag>梦想</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web基础</title>
    <url>/2020/06/28/Java-Web%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>软件架构：B/S（浏览器/服务器端）、C/S（客户端/服务器端） </p>
<p>资源分类： 静态资源（所有用户访问后，得到结果都是一样的）、动态资源（每个用户访问相同的资源后，得到的结果可能不一样，动态资源被访问后，需要先转换为静态资源，再返回给浏览器）</p>
<p>网络通信三要素：</p>
<p>IP：电子设备（计算机）在网络中的唯一标识</p>
<p>端口：应用程序在计算机中的唯一标识 0~65536</p>
<p>传输协议：规定了数据传输的规则（tcp、udp）</p>
<p>服务器：安装了服务器软件的计算机</p>
<p>服务器软件：接收用户请求，处理请求，做出响应</p>
<p>Web服务器软件：接收用户请求，处理请求，做出响应</p>
<p> webLogic：oracle公司，大型的Java EE服务器，收费</p>
<p> webSphere：IBM公司，大型的Java EE服务器，收费</p>
<p> JBOSS：JBOSS公司，大型的Java EE服务器，收费</p>
<p> Tomcat：Apache基金组织，中小型Java EE服务器，开源免费</p>
<p>Servlet： server applet（运行在服务器端的小程序）Servlet就是一个接口，定义了java类被浏览器访问到（tomcat识别）的规则。</p>
<p>快速入门：</p>
<p>1、 创建Java EE项目</p>
<p>2、 定义一个类实现Servlet接口，并实现接口中的所有抽象方法</p>
<p>3、 在web.xml中配置Servlet</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-name&gt; xx&lt;&#x2F;servlet-name&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-class&gt;全限定类名&lt;&#x2F;servlet-class&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line"> &lt;servlet-name&gt;xx&lt;&#x2F;servlet-name&gt;</span><br><span class="line"></span><br><span class="line">&lt;url-pattern&gt;xxx&lt;&#x2F; url-pattern&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F; servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>执行原理:</p>
<p>1． 当服务器接受到客户端浏览器的请求后，会解析请求url路径，获取访问的servlet资源路径</p>
<p>2． 查找web.xml文件，是否有对应的<url-pattern>标签内容</p>
<p>3． 如果有，则查找对应的<servlet-class>全类名</p>
<p>4． Tomcat会将字节码文件加载进内存，并创建其对象</p>
<p>5． 调用其方法</p>
<p>Servlet的生命周期：<br>1.被创建：执行init方法，只执行一次</p>
<p>Servlet什么时候被创建？</p>
<p>默认情况下，第一次访问时，Servlet被创建</p>
<p>可以配置Servlet的创建时机，在web.xml的<servlet>标签下配置</p>
<p> 第一次访问时创建<load-on-startup>的值为负数</p>
<p> 服务器启动时创建<load-on-startup>的值为0或正整数</p>
<p>Servlet的init方法只执行一次，说明Servlet是单例的</p>
<p>多个用户同时访问时，可能存在线程安全问题</p>
<p>解决：尽量不要在Servlet中定义成员变量</p>
<p>2.提供服务：执行service方法，可执行多次</p>
<p>3.被销毁：执行destroy方法，只执行一次</p>
<p>注解方式：</p>
<p>可以不创建web.xml</p>
<p>在实现Servlet的类上使用@WebServlet（urlPatterns=”资源路径”）注解进行配置</p>
<p>Servlet体系结构：</p>
<p>GenericServlet：抽象类，将Servlet接口中其他方法做了默认空实现</p>
<p> HttpServlet：抽象类，对http协议的一种封装，简化操作，复写了doGet/doPost方法</p>
<p>一个Servlet可以定义多个访问路径@WebServlet（{“/d”,”/dd”,”/ddd”}）</p>
<p>路径定义规则:</p>
<p> 1./xxx</p>
<p> 2./xxx/xxx:多层路径，目录结构</p>
<p> 3.*.do</p>
<p>HTTP：超文本传输协议（Hyper Text Transfer Protocol）</p>
<p>传输协议：定义了，客户端和服务器端通信时，发送数据的格式</p>
<p>特点：</p>
<p>1、 基于TCP/IP的高级协议</p>
<p>2、 默认端口号：80</p>
<p>3、 基于请求/响应模型的：一次请求对应一次响应</p>
<p>4、 无状态的：每次请求之间相互独立，不能交互数据</p>
<p>请求消息的数据格式：</p>
<p>1、 请求行</p>
<p>请求方式 请求url 请求协议/版本</p>
<p>GET /login.html HTTP/1.1</p>
<p>请求方式：</p>
<p> HTTP协议中有7中请求方式，常用有2种</p>
<p> GET:</p>
<ol>
<li><p>请求参数在请求行中，在url后</p>
</li>
<li><p>请求的url有长度限制</p>
</li>
<li><p>不太安全</p>
<p>POST:</p>
<p>1．请求参数在请求体中</p>
<p>2．请求的url长度没有限制</p>
<p>3．相对安全</p>
</li>
</ol>
<p>2、 请求头</p>
<p>请求名称： 请求头值</p>
<p>常见请求头：</p>
<p>1． User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</p>
<p>2． Referer：告诉服务器，当前请求从哪里来</p>
<p>3、 请求体（正文）</p>
<p>4、 请求空行</p>
<p>空行</p>
<p>1、 request对象和response对象的原理</p>
<ol>
<li><p>request和response对象是由服务器创建的，我们来使用他们</p>
</li>
<li><p>request对象是来获取请求消息，response对象是来设置响应消息</p>
</li>
</ol>
<p>2、 request对象继承体系结构</p>
<p>ServletRequest接口——继承——HttpServletRequest接口——实现——org.apache.catalina.connector.RequestFacade类（tomcat）</p>
<p>3、 request功能：</p>
<p>1、 获取请求消息数据</p>
<ol>
<li>获取请求行数据</li>
</ol>
<p>1．获取请求方式：GET</p>
<p> String getMethod()</p>
<p>2．*获取虚拟目录：/day14</p>
<p> String getContextPath()</p>
<p>3．获取Servlet路径：/demo1</p>
<p> String getServletPath()</p>
<p>4．获取get方式请求参数：name=zhangsan</p>
<p> String getQueryString</p>
<p>5．*获取请求URI：/day14/demo1</p>
<p> String getRequestURI()</p>
<p> StringBuffer getRequestURL() <a href="http://localhost/day14/demo1" target="_blank" rel="noopener">http://localhost/day14/demo1</a></p>
<p> URL：统一资源定位符</p>
<p> URI：统一资源标识符（大）</p>
<p>6．获取协议及版本：HTTP/1.1</p>
<p> String getProtocol()</p>
<p>7．获取客户机的IP地址：</p>
<p> String getRemoteAddr()</p>
<ol start="2">
<li>获取请求头数据</li>
</ol>
<p>String getHear（String name）：通过请求头名称获取请求头的值</p>
<p>Enumeration<String> getHeaderNames（）：获取所有请求头名称</p>
<ol start="3">
<li>获取请求体数据</li>
</ol>
<p>请求体：只有post请求方式才有请求体</p>
<p>步骤：获取流对象，再从流对象中拿数据</p>
<p>1． 获取流对象：</p>
<p>BufferedReader getReader();获取字符输入流，只能操作字符数据</p>
<p>ServletInputStream getInputStream();获取字节输入流，可以操作所有数据</p>
<p> 其他功能</p>
<ol>
<li>获取请求参数的通用方式：</li>
</ol>
<p>1． String getParameter(String name)</p>
<p>2． String[] getParameterValues(String name)</p>
<p>3． Enumeration<String> getParameterNames();</p>
<p>4． Map&lt;String,String[]&gt; getParameterMap();</p>
<p>中文乱码问题：request.setCharacterEncoding(“utf-8”)</p>
<ol start="2">
<li><p>请求转发：一种在服务器内部的资源跳转方式</p>
</li>
<li><p>步骤：</p>
</li>
</ol>
<p>1． 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</p>
<p>2． 使用RequestDispatcher对象来转发：forward(ServletRequest request,ServletResponse response)</p>
<p>2．特点：</p>
<p> 1．浏览器地址栏路径不发生变化</p>
<p> 2．只能转发到当前服务器内部资源中</p>
<p> 3．转发是一次请求</p>
<ol start="3">
<li>共享数据</li>
</ol>
<p>域对象：一个有作用范围的对象，可以在范围内数据共享</p>
<p>Request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p>
<p>方法：</p>
<ol>
<li><p>Void setAttribute(String name,Object obj);存储数据</p>
</li>
<li><p>Object getAttribute(String name);通过键获取值</p>
</li>
<li><p>Void removeAttribute(String name);通过键移除键值对</p>
</li>
<li><p>获取ServletContext</p>
</li>
</ol>
<p>ServletContext getServletContext()</p>
<p>BeanUtils工具类：</p>
<p>1、 JavaBean：标准Java类</p>
<p>1． 要求：</p>
<p>1．类必须被public修饰</p>
<p>2．必须提供空参构造器</p>
<p>3．成员变量必须使用private修饰</p>
<p>4．提供公共setter和getter方法</p>
<p>2． 功能：封装数据</p>
<p>2、 概念</p>
<p>成员变量：</p>
<p>属性：setter和getter方法截取后的产物</p>
<p>3、 方法：</p>
<p>1． setProperty()</p>
<p>2． getProperty()</p>
<p>3． Populate(Object obj , Map map)将map集合的键值对信息，封装到对应的JavaBean对象中</p>
<p>Response对象：</p>
<p> 功能：设置响应消息</p>
<p>1． 设置响应行：设置状态码：setStatus（int sc）</p>
<p>2． 设置响应头：setHearder（String name , String value）</p>
<p>3． 设置响应体:</p>
<ol>
<li>获取输出流：</li>
</ol>
<p>字符输出流：PrintWriter getWriter（）</p>
<p>字节输出流：ServletOutputStream getOutputStream（）</p>
<ol start="2">
<li>使用输出流，将数据输出到客户端浏览器</li>
</ol>
<p>重定向：</p>
<p> response.setStatus(302);</p>
<p> response.setHeader(“location”,”重定向的url”)</p>
<p> 或</p>
<p> response.sendRedirect(“重定向的url”);</p>
<p> 特点：</p>
<p>1． 地址栏发生变化</p>
<p>2． 重定向可以访问其他站点资源</p>
<p>3． 重定向是两次请求，不能使用request域对象来共享数据</p>
<p>路径写法：</p>
<p>1． 相对路径：通过相对路径不可以确定唯一资源</p>
<p>不以/开头，以.开头路径</p>
<p>规则：找到当前资源和目标资源的相对位置关系</p>
<p> ./当前目录 ../后退一级目录</p>
<p>2． 绝对路径：通过绝对路径可以确定唯一资源</p>
<p>以/开头</p>
<p>规则：判断定义的路径是给谁用的？</p>
<p> 给客户端浏览器使用：需要加虚拟目录（重定向）</p>
<p> 建议虚拟目录动态获取：request.getContextPath()</p>
<p> 给服务器使用：不需要加虚拟目录（转发）</p>
<p>HTTP协议：</p>
<p> 响应消息：服务器发给客户端的数据</p>
<p>1、 响应行</p>
<p>组成：协议/版本 响应状态码 状态码描述</p>
<p>响应状态码：</p>
<p>1． 状态码都是3位数字</p>
<p>2． 分类：</p>
<p>1xx：服务器接收客户端消息，但没有接收完成，等待一段时间后发送1xx状态码</p>
<p>2xx：成功，代表200</p>
<p>3xx：重定向，代表302，304（访问缓存）</p>
<p>4xx：客户端错误，代表404（路径没有对应资源），405（请求方式没有对应doxxx方法）</p>
<p>5xx：服务器错误，代表500（服务器内部出现异常）</p>
<p>2、 响应头</p>
<p>1． 格式：头名称：值</p>
<p>2． 常见响应头：</p>
<p>1． Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</p>
<p>2． Content-disposition：服务器告诉客户端以什么格式打开响应体数据</p>
<p>默认值：in-line:默认值，在当前页面内打开</p>
<p> attachment， filename=xxx，以附件形式打开响应体（文件下载）</p>
<p>3．响应空行</p>
<p> 4．响应体：传输的数据</p>
<p> 服务器输出字符数据到浏览器</p>
<p> 步骤：</p>
<ol>
<li><p>获取字符输出流</p>
</li>
<li><p>输出数据</p>
</li>
</ol>
<p>乱码问题：</p>
<p>设置流的默认编码、告诉浏览器响应体使用的编码。response.setContentType(“text/html ; charset=utf-8”)</p>
<p> 服务器输出字符数据到浏览器</p>
<p> 步骤：</p>
<ol>
<li><p>获取字节输出流</p>
</li>
<li><p>输出数据</p>
</li>
</ol>
<p>ServletContext对象</p>
<p> 概念：代表整个web应用，可以和程序的容器（服务器）来通信</p>
<p> 获取：</p>
<p>1． 通过request对象获取</p>
<p>request.getServletContext()</p>
<p>2． 通过HttpServlet获取</p>
<p>this.getServletContext()</p>
<p> 功能：</p>
<p>1． 获取MIME类型</p>
<p>MIME类型：在互联网通信过程中定义的一种文件数据类型</p>
<p>格式： 大类型/小类型 text/html image/jpeg</p>
<p>获取：String getMimeType(String file)</p>
<p>2． 域对象：共享数据</p>
<p>ServletContext对象范围：所有用户请求的数据</p>
<p>3． 获取文件的真实（服务器）路径</p>
<p>方法：String getRealPath（String path）</p>
<p>会话技术：</p>
<p>1． Cookie</p>
<p>2． Session</p>
<p>会话：一次会话中包含多次请求和响应</p>
<p>功能：在一次会话的范围内的多次请求间，共享数据</p>
<p>3． 方式</p>
<p>1． 客户端会话技术：Cookie</p>
<p>2． 服务器端会话技术：Session</p>
<p>Cookie：</p>
<ol>
<li>创建Cookie对象，绑定数据</li>
</ol>
<p>new Cookie（String name，String value）</p>
<ol start="2">
<li>发送Cookie对象</li>
</ol>
<p>response.addCookie（Cookie cookie）</p>
<ol start="3">
<li>获取Cookie对象，拿到数据</li>
</ol>
<p>Cookie[ ] request.getCookies（）</p>
<p> 实现原理：基于响应头set-cookie和请求头cookie实现</p>
<p>Cookie的细节</p>
<p>1． 一次可以发送多个cookie。</p>
<p>2． Cookie在默认情况下，当浏览器关闭，Cookie数据被销毁。</p>
<p>3． 持久化存储：setMaxAge（int second）正数：将cookie数据写到硬盘文件中，持久存储。负数：默认值。零：删除cookie信息。</p>
<p>4． 在tomcat 8之前cookie不支持存储中文数据，需要将中文数据转码。</p>
<p>5． 默认情况下在同一个服务器中cookie不能在多个web项目里共享。setPath（String path）默认情况下，设置当前虚拟目录，如果要共享将path设置成/即可。</p>
<p>6． 不同的tomcat服务器cookie共享setDomain（String path）如果设置一级域名相同，那么多个服务器间cookie可以共享。</p>
<p>Cookie特点：</p>
<p>1． Cookie存储数据在客户端浏览器</p>
<p>2． 浏览器对单个cookie的大小有限制（4kb）同一个域名下的cookie也有限制（20个）</p>
<p>作用：</p>
<p>Cookie一般用于存储少量不太敏感的数据</p>
<p>在不登录的情况下，完成服务器对客户端的身份识别</p>
<p>Session：</p>
<p>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器对象中HttpSession</p>
<p>快速入门：</p>
<ol>
<li>获取HttpSession对象</li>
</ol>
<p>HttpSession session = request.getSession()</p>
<ol start="2">
<li>使用HttpSession对象</li>
</ol>
<p>Object getAttribute(String name)</p>
<p>Void setAttribute(String name , Object value)</p>
<p>Void removeAttribute(String name)</p>
<p> 原理：Session的实现是依赖于Cookie</p>
<p> 细节：</p>
<ol>
<li>客户端关闭，服务器不关闭，两次获取的session不是同一个。如果需要相同 可以创建cookie，键为JSESSIONID，并设置最大存活时间，让cokie持久化保存。</li>
</ol>
<p>2．客户端不关闭，服务器关闭，两次获取的session不是同一个</p>
<p>Session的钝化：在服务器正常关闭前，将session对象序列化到硬盘上</p>
<p>Session的活化：在服务器启动后，将session文件转化为内存中的session对象</p>
<p>3． Session的销毁时间</p>
<p>1． 服务器关闭</p>
<p>2． Session对象调用invalidate()</p>
<p>3． 默认失效时间：30分钟</p>
<p>Session特点：</p>
<p>1． Session用于存储一次会话的多次请求的数据，存在服务器端</p>
<p>2． Session可以存储任意类型，任意大小的数据</p>
<p>三层架构：</p>
<p>1． 界面层（表示层）：用户可以通过界面上的组件和服务器进行交互 web层</p>
<p>2． 业务逻辑层：处理业务逻辑的 service层        </p>
<p>3． 数据访问层：操作数据存储文件 dao层</p>
<p>Filter：过滤器</p>
<p> 过滤器作用：一般用于完成通用的操作：如，登录验证，编码处理</p>
<p>快速入门：</p>
<p>1． 步骤</p>
<p>1． 定义一个类，实现Filter接口</p>
<p>2． 实现接口的抽象方法</p>
<p>3． 配置拦截路径，<a href="mailto:web.xml%E6%88%96%E6%B3%A8%E8%A7%A3@WebFilter%EF%BC%88">web.xml或注解@WebFilter（”/</a>路径”）</p>
<p>过滤器细节：</p>
<p>1． web.xml配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line"></span><br><span class="line"> &lt;filter-name&gt;xx&lt;&#x2F;filter-name&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line"></span><br><span class="line"> &lt;filter-mapping&gt;</span><br><span class="line"></span><br><span class="line"> &lt;filter-name&gt;xx&lt;&#x2F;filter-name&gt;</span><br><span class="line"></span><br><span class="line"> &lt;url-pattern&gt;&#x2F;url&lt;&#x2F;url-pattern&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>2． 过滤器执行流程     </p>
<p>3． 过滤器生命周期方法</p>
<p>1． init：在服务器启动后创建Filter对象，然后调用init方法只执行一次，用于加载资源</p>
<p>2． doFilter：每一次请求被拦截资源时，会执行，可执行多次。</p>
<p>3． destroy：在服务器关闭后，Filter对象被销毁，如果服务器正常关闭会执行destroy方法，只执行一次，用于释放资源。</p>
<p>4．过滤器配置详解</p>
<p>1． 具体资源路径：/index.html</p>
<p>2． 拦截目录：/user/* 访问/user下所有资源时，过滤器都会被执行</p>
<p>3． 后缀名拦截：*.html 访问所有后缀名为html资源时，过滤器都会被执行</p>
<p>4． 拦截所有资源：/* 访问所有资源，过滤器都会被执行</p>
<p>拦截方式配置：</p>
<p>注解：</p>
<p> 设置dispatcherTypes</p>
<ol>
<li><p>REQUEST：默认值，浏览器直接请求资源</p>
</li>
<li><p>FORWARD：转发访问资源</p>
</li>
<li><p>INCLUDE：包含访问资源</p>
</li>
<li><p>ERROR：错误跳转资源</p>
</li>
<li><p>ASYNC：异步访问资源</p>
</li>
</ol>
<p>web.xml配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dispatcher&gt;&lt;&#x2F;dispatcher&gt;</span><br></pre></td></tr></table></figure>

<p>5．过滤器链（配置多个过滤器）</p>
<p>执行顺序：过滤器a，b</p>
<p>过滤器a，过滤器b，资源执行，过滤器b，过滤器a</p>
<p>过滤器先后顺序问题：</p>
<p>1． 注解配置</p>
<p>按照类名的字符串比较规则，值小的先执行</p>
<p>2． web.xml配置： <filter-mapping>谁定义在上边，谁先执行</p>
<p>放行：.doFilter(servletRequest  request,servletReponse  response)</p>
<p>代理模式：</p>
<p> 静态代理：有一个类文件描述代理模式</p>
<p> 动态代理：在内存中形成代理类</p>
<p>Listener：监听器</p>
<p> 概念：web的三大组件之一</p>
<p> 事件监听机制：</p>
<p> 事件：一件事情</p>
<p> 事件源：事件发生的地方</p>
<p> 监听器：一个对象</p>
<p> 注册监听：将事件、事件源、监听器绑定在一起，当事件源上发生某个事件后，执 行监听器代码</p>
<p> ServletContextListener：监听ServletContext对象的创建和销毁</p>
<p> Void contextDestroyed（ServletContextEvent sce）ServletContext对象被销毁前会 调用该方法</p>
<p> Void contexInitialized（ServletContextEvent sce）ServletContext对象被创建后会 调用该方法</p>
<p>步骤</p>
<p> 定义一个类，实现ServletContextListener接口</p>
<p> 实现抽象方法</p>
<p> 配置</p>
<p> 1．web.xml<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;listener&gt;        </span><br><span class="line"></span><br><span class="line">&lt;listener-class&gt;类全限定名 &lt;&#x2F;listener-class&gt;</span><br><span class="line"></span><br><span class="line">&lt;listener&gt;</span><br></pre></td></tr></table></figure></p>
<p>  2．注解</p>
<p> @WebListener（）</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>笔记</tag>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础（待续）</title>
    <url>/2020/06/26/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%BE%85%E7%BB%AD%EF%BC%89/</url>
    <content><![CDATA[<p>NoSQL（Not Only SQL）不仅仅是SQL，泛指非关系型数据库。</p>
<p>NoSQL不依赖业务逻辑方式存储，而是以简单的key-value模式存储，因此大大增加了数据库的扩展能力</p>
<p>不遵循SQL标准</p>
<p>不支持ACID</p>
<p>远超于SQL的性能</p>
<p>NoSQL适用场景：对数据高并发的读写，海量数据的读写，对数据高可扩展性的。</p>
<p>Redis没有用户，所有访问的密码都一样。     </p>
<p>Redis数据类型</p>
<p>1． String</p>
<p>String类型是二进制安全的。意味着Redis的string可以包含任何数据，比如jpg图片序列化的对象</p>
<p>String类型是Redis的最基本的数据类型，一个Redis中文字符串value最多可以是512M</p>
<p>2． set</p>
<p>set是可以自动排重的，当需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择</p>
<p>Redis的set是string类型的无序集合，底层是一个value为null的hash表，所以添加删除查找的复杂度都是O(1)</p>
<p>3． List</p>
<p>单键多值</p>
<p>Redis列表是简单的字符串列表，按照插入顺序排序，可以添加元素到列表的左边或右边</p>
<p>底层实际是个双向链表，对两端的操作性能很高，通过索引下标操作中间的节点性能会较差</p>
<p>4． Hash</p>
<p>Redis的hash是一个键值对集合</p>
<p>Redis的hash是一个string类型的field和value的映射表，特别适合用于存储对象</p>
<p>类似Java的Map[String,String]</p>
<p>5． Zest</p>
<p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。不同之处是有序集合的每一个成员都关联了一个评分，这个评分被用来按照从最低分到最高分的方式排序集合中的成员，集合的成员是唯一的，但是评分可以重复。</p>
<p>因为元素有序，可以根据评分来获取一个范围的元素，访问有序集合的中间元素也非常快。</p>
<p>指令：</p>
<p>String</p>
<p> get [key]    查询对应键的值</p>
<p> set [key] [value]    添加键值对</p>
<p> append [key] [value]    将给定的[value]追加到原值的末尾</p>
<p> strlen [key]  或得值的长度</p>
<p> setnx [key] [value]  只有在key不存在时设置key的值</p>
<p> incr [key]  将key中存储的数字值增1  如果为空新增值为1</p>
<p> dect [key]   将key中存储的数字值减1</p>
<p>如果为空，新增值为-1</p>
<p> incrby/decrby [key]   将key中存储的数字值增减，自定义步长</p>
<p> mset [key1] [value1] [keyn] [valuen]   同时设置一个或多个键值对</p>
<p> mget [key1][keyn] 同时获取一个或多个value</p>
<p>msetnx [key1] [value1] [keyn] [valuen] 同时设置一个或多个键值对当且仅当key都不存在</p>
<p>getrange [key] [begin] [end] 获取值的范围</p>
<p>setrang [key] [begin] [value] 用value覆写[key]所存储的字符串值，从[begin]开始</p>
<p>setex [key] [过期时间] [value] 设置键值的同时，设置过期时间</p>
<p>getset [key] [value] 以旧换新，设置新值的同时获取旧值</p>
<p>List</p>
<p> lpush/rpush [key] [value] [keyn][valuen] 从左边/右边插入一个或多个值</p>
<p> lpop/rpop [key] 从左边/右边吐出一个值</p>
<p> rpoplpush [key1][key2] 从[key1]列表右边吐出一个值，  插到[key2]的右边</p>
<p> lrange [key][start][stop] 按照索引下标获得元素（左到   右）</p>
<p> lindex [key][index] 按照索引下标获得元素</p>
<p> llen [key] 获得列表长度</p>
<p> linsert [key] after [value] [newvalue] 在[value]的后面插入[new~]</p>
<p> lrem   [key] [n] [value] 从左边删除n个value(左到右)</p>
<p>Set</p>
<p> sadd [key] [value][valuen]  将一个或多个member元素加  入到集合key当中</p>
<p> smembers [key]  取出该集合的所有值</p>
<p> sismember [key] [value] 判断集合[key]是否含有该  [value]值，有返回1没有返回0</p>
<p> scard [key] 返回该集合的元素个数</p>
<p> srem [key] [value] [valuen] 删除集合中的某些元素</p>
<p> spop [key] 随机从该集合吐出一个值，删除</p>
<p> sranmember [key] [n] 随机从该集合取出n个值，不会  删除</p>
<p> sinter [key1] [key2] 返回两个集合的交集元素</p>
<p> sunion [key1] [key2] 返回两个集合的并集元素</p>
<p> sdiff [key1] [key2] 返回两个集合的差集元素</p>
<p>Hash</p>
<p> hset [key] [field] [value] 给[key]集合中的[field]键赋值  [value]</p>
<p> hget [key1] [field] 从[key]集合[field]取出[value]</p>
<p>hmset [key] [field] [value] [fieldn] [valuen] 批量设置hash的值</p>
<p> hexists key [field] 查看哈希表key中给定域  field是否存在</p>
<p> hvals [key] 列出该hash集合所有value</p>
<p> hincrby [key] [field] [increment] 为哈希表key中的域field   值加上增量increment</p>
<p> hsetnx [key] [field] [value] 将哈希表key中的域field  的值设置为value，当且仅  field不存在</p>
<p> hgetall [key] 获得key中所有的键值对</p>
<p>Zset</p>
<p> zadd [key] [score1] [value1] [~] 将一个或多个member元  元素及其score值加入到有 集key中</p>
<p> zrange [key] [start] [stop] [WITHSCORES]                   </p>
<p>返回有序集key中下标在[start][stop]之间的元素带WITHSCORES可以让分分数和值一起返回到结果集</p>
<p>zrangebyscore key min max [withscores] [limit offset count]</p>
<p>返回有序集key中，所有score值介于min和max之间包括等于min或max的成员，有序集成员按score值递增（从小到大）次序排列</p>
<p>zrevrangebyscore key max min [withscores] [limit offset count]</p>
<p>同上改为从大到小排列</p>
<p>zincrby [key] [increment] [value]  为元素的score加上增量</p>
<p>zrem [key] [value] 删除该集合下，指定元素</p>
<p>zcount [key] [min] [max] 统计该集合，分数区间内的  元素个数</p>
<p>zrank [key] [value] 返回该值在集合中的排名  从0开始</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>NoSQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构基础（待续）</title>
    <url>/2020/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>程序=数据结构+算法</p>
<p>数据结构是算法的基础</p>
<p>数据结构包括：线性结构和非线性结构</p>
<p>线性结构：</p>
<p>1． 线性结构作为最常用的数据结构，特点是数据元素之间存在一对一的线性关系</p>
<p>2． 线性结构有两种不同的存储结构，即顺序存储结构和链式存储结构，顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的</p>
<p>3． 链式存储的线性表称为链表，链表存储的元素不一定连续，元素节点存放数据元素以及相邻元素的地址信息。</p>
<p>4． 线性结构常见的有：数组，队列，链表，栈</p>
<p>非线性结构：</p>
<p> 非线性包括：二维数组，多维数组，广义表 ，树结构，图结构</p>
<p>稀疏数组&lt;-&gt;二维数组</p>
<p>队列：</p>
<p> 队列是一个有序表，可以用数组或是链表实现</p>
<p> 遵循先进先出原则，先存入的数据，先取出</p>
<p>链表：</p>
<p>1． 链表是以节点的方式来存储，是链式存储</p>
<p>2． 每个节点包含data域，next域，指向下一个节点</p>
<p>3． 链表的各个节点不一定是连续存储</p>
<p>4． 链表分带头结点的链表和没有头结点的链表</p>
<p>栈：</p>
<p>1． 栈的英文为stack</p>
<p>2． 栈是一个先入后出的有序列表</p>
<p>3． 栈允许变换的一端，称为栈顶top，另一端为固定一端，称为栈底bottom</p>
<p>4． 出栈噗pop，入栈push</p>
<p>排序算法：</p>
<p> 内部排序：</p>
<p>1． 直接插入排序</p>
<p>2． 希尔排序</p>
<p>3． 简单选择排序</p>
<p>4． 堆排序</p>
<p>5． 冒泡排序</p>
<p>6． 快速排序</p>
<p>7． 归并排序</p>
<p>8． 基数排序</p>
<p>外部排序：</p>
<p>时间复杂度：</p>
<p> 时间频度：一个算法中语句的执行次数称为语句频度或时间频度记为T(n)</p>
<p>一般情况下算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n)),称O(f(n))为算法的渐进时间复杂度，简称时间复杂度。</p>
<p>计算时间复杂度的方法：</p>
<p>1． 用常数1代替运行时间中的所有加法常数</p>
<p>2． 修改后的运行次数函数中，只保留最高阶</p>
<p>3． 去除最高阶的系数</p>
<p>常见的时间算法复杂度由小到大依次为：O(1)2 n)2 n)2) k)n)</p>
<p>归并排序：利用归并的思想实现排序方法，该算法采用经典的分治策略</p>
<p>基数排序（桶排序）：</p>
<p>radix sort属于分配式排序又称桶子法</p>
<p> 基数排序是属于稳定的排序，基数排序是效率高的稳定性排序法</p>
<p> 基数排序是桶排序的扩展</p>
<p> 排序负数，需优化</p>
<p><img src="https://i.loli.net/2020/06/26/hHfgeBP6uiT9x8Z.png" alt="1.png"></p>
<p>查找算法：常用的有四种</p>
<p>1． 顺序（线性）查找</p>
<p>2． 二分查找/折半查找</p>
<p>3． 插值查找：数据量大，分布均匀采用插值查找，速度较快</p>
<p>4． 斐波那契查找</p>
<p>哈希表：也叫散列表，是根据关键码值而进行数据访问的数据结构，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度，这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>笔记</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架笔记</title>
    <url>/2020/06/18/Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Spring优势：1、方便解耦，简化开发。2、AOP编程支持。3、声明式事务支持。4、方便程序测试。5、方便集成各种优秀框架。6、降低JAVA EE API的使用难度。7、源码是经典学习范例。</p>
<p><img src="https://i.loli.net/2020/06/18/6iDxklsZnSCJpTj.png" alt="1.png"></p>
<p>Bean：在计算机英语中有可重用组件含义。</p>
<p>JavaBean：用java语言编写的可重用组件。</p>
<p>控制反转（Inversion of Control）把创建对象的权利交给框架，包括依赖注入（Dependency Injection）和依赖查找（Dependency Lookup）。</p>
<p>ApplicationContext常用三个实现类：</p>
<p>ClassPathXmlApplicationContext：可以加载类路径下配置文件。</p>
<p>FileSystemXmlApplicationContext：可以加载磁盘任意路径下的配置文件（要有访问权）</p>
<p>AnnotationConfigApplicationContext：用于读取注解创建容器。</p>
<p>核心容器的两个接口引发出的问题：</p>
<p>ApplicationContext：在构建核心容器时，创建对象采用的策略是立即加载方式（单例对象适用）</p>
<p>BeanFactory：在构建核心容器时，创建对象采用的策略是延迟加载方式（多例对象使用）</p>
<p>创建Bean的三种方式：</p>
<p>第一种：使用默认函数构造</p>
<p>在spring中使用bean标签，配置id和class属性后，且没配其它属性和标签时，采用的就是默认函数构建bean对象，如果类中没有默认构造函数，则对象无法创建。</p>
<p>第二种：使用普通工厂中的方法创建对象（使用某个类的方法创建对象，并存入spring容器）</p>
<p>第三种:使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）</p>
<p>bean的作用范围：</p>
<p> scope属性：</p>
<p> singleton 单例（默认值）</p>
<p> prototype 多例</p>
<p> request 作用于web应用的请求范围</p>
<p> session 作用于web应用的会话范围</p>
<p> global-session 作用于集群环境的会话范围</p>
<p>bean对象的生命周期：</p>
<p> 单例：</p>
<p>出生：容器创建时</p>
<p>活着：容器在，对象就活着</p>
<p>死亡：容器销毁，对象消亡</p>
<p>总结：单例对象的生命周期和容器相同。</p>
<p> 多例：</p>
<p>出生：使用对象时spring框架创建</p>
<p>活着：对象使用过程中，一直活着</p>
<p>死亡：当对象长时间不用，且没有别的对象引用时，GC回收</p>
<p>依赖注入：</p>
<p>能注入的数据，有三类：</p>
<p>1、基本类型和String</p>
<p>2、其他bean类型（配置文件或注解配置过的bean）</p>
<p>3、复杂类型/集合类型</p>
<p> 注入方式，有三种：</p>
<p>1、使用构造函数提供</p>
<p>2、使用set方法提供</p>
<p>3、使用注解提供</p>
<p>1、标签中的属性：</p>
<p>type:用于指定要注入的数据类型</p>
<p>index:用于指定要注入的数据给构造函数中指定索引位置参数赋值</p>
<p>name:用于指定给构造函数中指定名称的参数赋值</p>
<p>value:用于提供基本类型和Sring类型数据</p>
<p>ref:用于知道你个其他bean类型数据。它指的就是在spring的ioc容器中出现过的bean对象</p>
<p>2、set方法注入</p>
<p>涉及的标签：property</p>
<p>出现的位置：bean标签内部</p>
<p>标签的属性：</p>
<p> name：于指定注入时所调用的方法名称</p>
<p> value：用于提供基本数据类型和String类型的数据</p>
<p>ref：用于指定其他bean数据，它指的就是在spring的ioc容器中出现过的bean对象</p>
<p>3、复杂类型的注入/集合注入</p>
<p>用于给List构集合注入的标签：</p>
<p> list array set</p>
<p>用于给Map结构集合注入的标签：</p>
<p> map props</p>
<p>注解:</p>
<p> 注解创建对象：</p>
<p>@Component：把当前类对象存入spring容器中，属性value指定bean的id</p>
<p>@Controller：一般用于表现层</p>
<p>@Service：一般用于业务层</p>
<p>@Repository：一般用于持久层</p>
<p> 用于注入数据：</p>
<p> @Autowired：自动按照类型注入，只要容器中有唯一一个bean对象类型 和要注入的变量类型匹配，就可以成功注入。出现位置可以是成员变量 和方法等。</p>
<p> @Qualifier：在按照类型注入的基础上，再按照名称注入，它在给类成 注入时不能单独使用，但是在方法参数注入时可以单独使用。</p>
<p> @Resource：直接按照bean的id注入，可以独立使用。属性name用于 指定bean的id。</p>
<p> @Value：用于注入基本类型和String类型数据，属性value用于指定数 据的值，可以使用spring的SpEL表达式。</p>
<p> 用于改变作用范围的：</p>
<p>@Scope：用于指定bean的作用范围，属性value指定范围的取值，singleton、prototype。</p>
<p> 和生命周期相关：</p>
<p> @PreDestroy：指定销毁方法</p>
<p> @PostConstruct：指定初始化方法</p>
<p>用于配置：</p>
<p>@Configuration：指定当前类是一个配置类，细节当配置类作为AnnotationConfigApplicationContext对象创建的参数时，可以不写</p>
<p> @ComponentScan：用于通过注解指定spring在创建容器是要扫描的包</p>
<p> @Bean：用于把当前方法的返回值作为bean对象存入spring的ioc容器 属性name用于指定bean的id，不写时默认是方法名</p>
<p> @Import：导入其它配置类，小配置类导入主配置类，属性value指定其 它配置类的字节码</p>
<p>@PropertySource：用于指定properties，属性value指定文件名称和<br>路径，关键字classpath表示类路径下</p>
<p>动态代理：</p>
<p> 特点：字节码谁用谁创建，谁用谁加载</p>
<p> 作用：不修改源码的基础上对方法增强</p>
<p> 分类：基于接口的动态代理、基于子类的动态代理</p>
<p> 基于接口的动态代理：</p>
<p> 使用Proxy类中的newProxyInstance方法</p>
<p> newProxyInstance方法参数：</p>
<p> ClassLoader：类加载器,用于加载代理对象字节码，和被代理对象使用 相同的类加载器</p>
<p> Class[]:字节码数组，让代理对象和被代理对象具有相同的方法</p>
<p> InvocationHandler:用于提供增强的代码，写如何代理，通常都是匿名 内部类</p>
<p> invoke方法参数：</p>
<p> proxy：代理对象的引用</p>
<p> method：当前执行的方法</p>
<p> args：当前执行方法所需的参数   </p>
<p> 基于子类的动态代理：</p>
<p> 使用Enhancer类中的create方法</p>
<p> Create方法的参数：</p>
<p> Class：字节码，指定被代理对象的字节码</p>
<p>Callback：用于增强代码，一般是写该接口的子接口实现类</p>
<p>MethodInterceptor，通常是匿名内部类</p>
<p>Intercept方法参数:</p>
<p> proxy: 代理对象的引用</p>
<p> method：当前执行的方法</p>
<p> objects：当前执行方法所需的参数</p>
<p> methodProxy:当前执行方法的代理对象</p>
<p>AOP：Aspect Oriented Programming，面向切面编程</p>
<p>优势：减少重复代码，提高开发效率，方便维护</p>
<p>术语：</p>
<p> Joinpoint(连接点)：被拦截到的点，这些点指的是方法</p>
<p> Pointcut：切入点指我们对哪些Joinpoint进行拦截定义</p>
<p> Advice(通知/增强)：通知是指拦截到Joinpoint之后所要做的事情，前置 通知，后置通知，异常通知，最终通知，环绕通知</p>
<p> Target(目标对象)：代理的目标对象</p>
<p> Weaving(织入)：把增强应用到目标对象来创建新的代理对象的过程</p>
<p> Proxy(代理):一个类被AOP织入增强后，就参生一个结果代理类</p>
<p> Aspect(切面)：是切入点和通知的结合</p>
<p>Spring中基于xml的AOP配置：</p>
<p>1、把通知bean交给spring管理</p>
<p>2、使用aop：config标签表明开始aop配置</p>
<p>3、使用aop：aspect标签表明配置切面</p>
<p>id属性：是给切面提供一个唯一表示</p>
<p>ref属性：是指定通知类bean的id</p>
<p>4、在aop：aspect标签内部使用对应标签来配置通知类型</p>
<p>method属性：用于指定通知方法</p>
<p>pointcut属性：用于指定切入点表达式，该表达式的含义指的是业务层中哪  些方法被增强</p>
<p>切入点表示式写法：</p>
<p> 关键字：execution</p>
<p> 表达式：</p>
<p> 访问修饰符 返回值 包名.包名.包名…类名.方法名(参数列表)</p>
<p> 全通配写法：</p>
<p><em>**..</em>.*(..)<br>前两个星号中间有空格</p>
<p>Spring中基于xml的声明式事务控制配置步骤</p>
<ol>
<li><p>配置事务管理器</p>
</li>
<li><p>配置事务的通知</p>
</li>
</ol>
<p>使用标签配置事务通知</p>
<p>属性：</p>
<p>id：给事务通知起一个唯一标识</p>
<p>transaction-manager：给事务通知提供一个事务管理器的引用</p>
<p>3．配置AOP中的通用切入点表达式</p>
<p>4.简历事务通知和切入点表达式的对应关系</p>
<p>5.配置事务的属性</p>
<p> 在标签内部</p>
<p> 属性：</p>
<p> isolation：指定事务的隔离级别，默认是DEFAULT,表示数据库隔离级别</p>
<p> propagation：指定事务传播行为，默认是REQUIRED,增删改的选择，查询方 法可以选择SUPPORTS</p>
<p> read-only：指定事务是否只读，只有查询方法才能设置true，默认值false 表示读写</p>
<p> timeout：指定事务超时时间，默认是-1，表示永不超时，单位是秒</p>
<p> rollback-for：指定一个异常，产生该异常时，事务回滚。产生其它异常时， 事务不回滚。没有默认值，表示任何异常都回滚</p>
<p> no-rollback-for：指定一个异常，产生该异常时，事务不回滚。产生其它 异常时，事务回滚。没有默认值，表示任何异常都回滚。</p>
<p> 注解：</p>
<p>@Transactional：开启事务注解</p>
<p>@EnableTransactionManagemet：开启配置类事务注解支持</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JAVA</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程基础</title>
    <url>/2020/06/18/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>线程的生命周期：</p>
<p><img src="https://i.loli.net/2020/06/18/2KfBTbIHuWpYMA5.png" alt="1.png"></p>
<p>（new）新建（start）–&gt;就绪&lt;–(sleep时间到)阻塞&lt;–(sleep,suspend)运行(stop,执行完)–&gt;死亡。</p>
<p>Object和Condition休眠唤醒：</p>
<p>Object：wait()和notify()必须在synchronized（同步锁）下使用</p>
<p>Condition：await()和signal()必须在Lock（互斥锁/共享锁）配合使用</p>
<p>线程通讯：</p>
<p>CountDownLatch：1个线程等待多个线程执行完毕后再执行（教练等待3个运动员做好准备）</p>
<p>CyclicBarrier：多个线程等待到同一状态后，在同一时刻一起执行（3人同时起跑）</p>
<p>Semaphore：用于控制对某组资源的访问（8人使用3台机器）</p>
<p><img src="https://i.loli.net/2020/06/18/wNyma1ovBCAPcHu.png" alt="2.png"></p>
<p>JAVA内存模型：</p>
<p><img src="https://i.loli.net/2020/06/18/h59AIf8cyzj6eZK.png" alt="3.png"></p>
<p><img src="https://i.loli.net/2020/06/18/MI7PukYXl4WvVGh.png" alt="4.png"></p>
<p>JAVA栈：</p>
<p>每个线程会对应一个JAVA栈</p>
<p>每个JAVA栈由若干个栈帧组成</p>
<p>每个方法对应一个栈帧</p>
<p>线程请求的栈深度大于虚拟机所允许的深度时，将抛出StackOverflowError</p>
<p>栈扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常</p>
<p>栈顶的栈帧为活动栈，表示当前执行的方法</p>
<p>方法区：</p>
<p>方法区是Java堆的永久区</p>
<p>方法去存放要加载的类信息、类中的静态常量、定义为final的常量、类中field信息、类中方法信息</p>
<p>方法去是被java线程共享的</p>
<p>常量池：</p>
<p>是方法区的一部分</p>
<p>常量池存放两类数据：字面量（字符串，final变量）和引用量（类/接口、方法和字段名称）</p>
<p>多线程特型：原子性、可见性、有序性</p>
<p>ThreadLocal、CAS</p>
<p>CAS存在ABA问题</p>
<p>锁：</p>
<p>不可重入锁：线程请求它已经拥有的锁时会阻塞</p>
<p>可重入锁：线程可以进入它已经拥有的锁的同步代码块（ReentrantLock）</p>
<p>读写锁：可以同时读，读的时候不能写。不能同时写，写的时候不能读(ReentrantReadWriteLock)</p>
<p>Volatile关键字：</p>
<p>状态量标记</p>
<p>双重校验</p>
<p>同步类容器（线程安全）</p>
<p>Vector、Stack、HashTable（类似HashMap）</p>
<p>Collections类是一个工具类，不同于Collection接口，提供了静态工厂方法来创建同步容器类。</p>
<p>并发容器（线程安全）</p>
<p>ConcurrentHashMap：对应非并发容器：HashMap</p>
<p>CopyOnWriteArraylist：对应非并发容器：ArrayList</p>
<p>CopyOnWriteArraySet：对应非并发容器：HashSet</p>
<p>ConcurrentSkiptMap;对应非并发容器：TreeMap</p>
<p>ConcurrentSkiptSet: 对应非并发容器：TreeSet</p>
<p>ConcurrentLinkQueue: 对应非并发容器：Queue</p>
<p>线程池：</p>
<p>Executors工具类</p>
<p>newCacheThreadPool</p>
<p>newFixedThreadPool</p>
<p>newSingleThreadExecutor</p>
<p>newScheduleThreadPool</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>笔记</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2020/06/12/JAVA%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>面向对象是向现实世界模型的自然延伸，这是一种“万物皆对象”的编程思想。在现实生活中的任何物体都可以归为一类事物，而每一个个体都是一类事物的实例。</p>
<p>Arraylist是可以扩展长度的数组，声明时必须跟上泛型，泛型的内容为引用类型，不能是基本类型。如果需要基本类型，可以用其包装类，int-&gt;Integer，char-&gt;Character。</p>
<p>String变成Char数组用.toCharArray()方法，Arrays.sort();对字符数组进行排序。</p>
<p>重写(Override):方法名称一样，参数列表一样</p>
<p>重载(OverLoad):方法名称一样，参数列表不一样</p>
<p>子类构造方法中有一个默认的super()调用</p>
<p>Super关键字，1、在子类的成员方法中，访问父类成员变量。2、在子类成员方法中访问父类成员方法。3、在子类构造方法中，访问父类的构造方法。</p>
<p>This关键字，1、在本类成员方法中，访问本类成员变量。2、在本类成员方法中，访问本类的另一个成员方法。3、在本类成员方法中，访问本类的另一个构造方法。</p>
<p>Super与This两种构造调用，不能同时使用。</p>
<p>抽象类（Abstract）：1、抽象类的所有抽象方法必须实现，子抽象类可以实现部分抽象方法。2、抽象类里可以没有任何抽象方法。</p>
<p>接口（Interface）：1、是一种公共规范标准,是一种引用数据类型。2、如果实现类没有重写接口中所有的抽象方法，那么这个实现类自己必须是抽象类。3、接口中可以定义常量，必须赋值，必须使用public static final修饰（可以省略）。4、接口没有静态代码块或者构造方法的。5、类与接口之间是多实现的，接口与接口之间是多继承的。</p>
<p>JAVA三大特型：封装、继承、多态。</p>
<p>多态：1、父类引用指向子类对象。2、格式：父类名称 对象名=new 子类名称（）；接口名称 对象名=new 实现类名（）；3、成员方法，编译看左边，运行看右边。成员变量，编译看左边运行看左边。</p>
<p>Final修饰类，成员方法，局部变量，成员。</p>
<p>成员内部类，局部内部类（修饰符不能写），匿名内部类。</p>
<p>匿名内部类：接口名 对象名=new 接口名（）{….实现抽象方法};</p>
<p>包装类，自动装箱和拆箱。parseXxx()，toString(),valueOf();</p>
<p>集合：</p>
<p>List接口1、有序集合。2、允许存储重复元素。3、有索引，可以使用普通for循环遍历。</p>
<p>Set接口1、不允许存储重复元素。2、没有索引，不能使用普通for循环遍历。迭代器iterator接口，增强for循环for（String s : arra）{ };</p>
<p>泛型：泛型通配符？</p>
<p>数据结构：</p>
<p>栈：先进后出（弹夹）</p>
<p>队列：先进先出</p>
<p>数组：查询快（数组的地址是连续的，通过首地址，和索引可以快速找到某一元素），增删慢（数组的长度是固定的，需创建新数组，并把原来数据复制过来）</p>
<p>链表：查询慢（链表中地址不是连续的，都必须从头开始查询），增删快（链表结构增加或删除一个元素对整体没有影响，所以增删快）</p>
<p>树：</p>
<p>List集合：ArrayList、LinkList类似数组和链表</p>
<p>Set集合：</p>
<p>HashSet特点：是一个无序集合，底层是一个哈希表结构（数组+链表/红黑树）（查询很快）。LinkHashSet，底层是哈希表，多了一条链表（记录元素存储顺序）保证元素有序。</p>
<p>哈希值：是一个十进制整数，由系统随机给出（是一个逻辑地址，不是实际物理地址）</p>
<p>可变参数：实际就是传递数组，格式：方法名（数据类型…变量名）1、一个方法的参数列表可变参数只能有一个。2、如果方法的参数有多个，那么可变参数要写在末尾。</p>
<p>Map集合：1、K不允许重复V可以重复。2、K,V一一对应</p>
<p>HashMap是一个无序集合，存入和取出的顺序有可能不一致。</p>
<p>LinkedHashMap底层是哈希表+链表，存储和取出元素的顺序是一样的。</p>
<p>HashTable是线程安全的，只能存在非null的键或值</p>
<p>Entry遍历Map增强for循环 for（Map.Entry entry：set）{   enrty.getvalue(); }</p>
<p>哈希冲突：需要重写hashCode方法和equals方法</p>
<p>并发：指两个或多个事件在同一时间段内发生。（交替发生）</p>
<p>并行：指两个或多个事件在同一时刻发生。（同时发生）</p>
<p>进程：系统进程，进程是cpu资源分配的最小单位（火车）</p>
<p>线程：线程是cpu调度的最小单位。（车厢）</p>
<p>Thread类的start方法结果是两个线程并发的运行，当前线程（main线程）和创建的新线程（执行其run方法），多次启动一个线程是非法的，特别是当线程已经结束后，不能在启动。</p>
<p>Cpu抢占调度</p>
<p>Runable接口，好处：1、避免了单继承的局限 2、增强了程序的扩展性，降低了程序的耦合性</p>
<p>匿名内部类，创建线程，简化。</p>
<p>new Thread（new Runable{</p>
<p> @Override</p>
<p> public void run（）{};</p>
<p>}）.start（）;</p>
<p>线程安全：</p>
<p>1、同步代码块：synchronized</p>
<p>Synchronized（锁对象）{</p>
<p> 共享资源代码</p>
<p>}</p>
<p>多线程进入同步代码块拿到锁对象的执行，没拿到锁对象的进入阻塞状态等待锁对象归还，然后执行。</p>
<p>2、同步方法：修饰符 synchronized 返回值类型 方法名（参数列表）{}</p>
<p>同步方法的锁对象是线程实现类即this</p>
<p>2.1、静态同步方法：静态同步方法的锁对象是本类的class属性</p>
<p>3、Lock锁 lock（） 和 unlock（）方法</p>
<p>线程状态：</p>
<p>NEW新建状态，BLOCKED阻塞状态，RUNNABLE运行状态，TERMINATED死亡状态，TIMED_WAITING休眠状态，WAITING永久等待状态。</p>
<p>线程池：线程池工厂类Executors提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池。</p>
<p>Lambda表达式：更简洁。格式：1、一些参数。2、一个箭头。3、一段代码。</p>
<p>递归：直接递归、间接递归</p>
<p>Transient关键字：瞬态关键字  不能被序列化</p>
<p>TCP通信：面向连接的通信，客户端和服务器端必须经过三次握手，建立逻辑连接，才能通信。Socket/ServerSocket</p>
<p>反射:将类的各个组成部分封装成其他对象这就是类的反射机制。</p>
<p>类加载3个阶段：Source源码阶段-&gt;Class类对象阶段-&gt;Runtime运行时阶段。</p>
<p>获取Class对象的方式：1、Class.forName（”全类名”） 2、类名.class 3、对象.getClass()</p>
<p>*同一个字节码文件.class在一次运行的过程中只会被加载一次，不论通过哪种方法获取的class对象都是同一个。</p>
<p>Class对象功能：</p>
<p>1、 获取成员变量</p>
<p>Field[ ] getFields(); 获取所有public修饰的成员变量</p>
<p>Field getfield(String name); 获取指定名称的public成员变量</p>
<p>Field[ ] getDeclaredFields(); 获取所有的成员变量,不考虑修饰符private加.setAccessible(true)</p>
<p>Field getDeclaredField(String name);</p>
<p>2、 获取成员方法</p>
<p>Method[ ] getMethods();</p>
<p>Method[ ] getMethods(String name,类…parmeterTypes);</p>
<p>执行方法：Object invoke(Object obj,Object…args);</p>
<p>…</p>
<p>3、 获取构造方法</p>
<p>Constructor [ ]  getConstructors();</p>
<p>Constructor getConstructor(类…parameterType);</p>
<p>…</p>
<p>创建对象：T newInstance(Object…initargs);</p>
<p>4、 获取类名</p>
<p>String getName();   </p>
<p>注解（Annotation）：</p>
<p>JDK预定义的注解：@Override、@Deprecated（表示该内容已过时）、@SuppressWarnings（压制警告，一般传递参数”all”）</p>
<p>自定义注解：</p>
<p> 格式：</p>
<p>元注解：用于描述注解的注解</p>
<p>@Target：描述注解能够作用的位置</p>
<p> ElementType取值：</p>
<p> Type：类</p>
<p> METHOD：</p>
<p> FIELD：成员变量</p>
<p>@Retention：描述注解能被保留的阶段</p>
<p> RetentionPolicy取值：</p>
<p>  RUNTIME：会被保留到class字节码文件中，被JVM读取到</p>
<p>@Doucumented：描述注解是否被抽取到api文档中</p>
<p>@Inherited：描述注解是否被子类继承</p>
<p> public @interface 注解名称{ }</p>
<p> 本质：注解本质上就是一个接口，该接口默认继承Annotation接口</p>
<p> 属性：接口中可以定义的成员方法</p>
<p> 要求属性的返回值类型：</p>
<p>1、 基本类型</p>
<p>2、 String</p>
<p>3、 枚举</p>
<p>4、 以上类型的数组</p>
<p>定义的属性，在使用时需要给属性赋值（加了default除外）</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>笔记</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>我的大学</title>
    <url>/2020/04/04/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>　　关于大学生活的点滴，回忆，感言。回首依旧能感受到那些美好。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>　　曾说，文字是情感宣泄的出口。是呀，我的大学，包含了难忘的时光，沉甸甸的情感，绞尽脑汁凑满减的外卖，上万行的代码（计算机专业），一同睡懒觉旷课的舍友（手动滑稽），期末一起挑灯夜战的小伙伴，挂了很多人的高树（高数），等等。愿用这篇文字，记录我难以忘怀的情感，时光，伙伴。<br><strong><center>大一</center></strong></p>
<p>　　正如游戏中的术语，萌新（新手）；电脑中的术语，小白。刚进入大学，讲道理，我被闽南师大震撼到了。犹如山炮进城，哇！学校好大，建筑好美，食堂好多，饭菜好多样呀，社团好像很有趣。一切的一切都是崭新的，仿佛河水刚汇聚到大海的那一刻，这片天地好辽阔。然鹅自己也很不成熟，会做错事，会耍脾气，考虑不周，遇事慌张。很感谢，我们的代班学长刘学姐郭。虽然相处的时间不多，但能感受到他们在默默中关心着我们，也为我们抗下了许多重担。  </p>
<p>　　学长刘是个代码大佬，ＡＣＭ队ｂｕｆｆ加成，印象蛮深的是问他一道ＡＣＭ题怎么打的时候，他并没有直接告诉我答案而是用启发的方式告诉我如何思考。  </p>
<p>　　学姐郭成绩优异，人也漂亮。女神啊，哈哈。印象最深的是一次班会发脾气了（原谅我哈哈），现在想想那个时候确实大家都太不懂事了，经常会惹学姐生气。  </p>
<p>　　当然我还碰到了另外四位很重要的学长学姐，李，郭，蔡，张。这四位学姐学姐是我们校就业信息部的部长和副部长了。很幸运能加入这个部门，在一年的部门活动中我成长了。从开始，连excel，word，ppt都不明白怎么用的小白，变成了能熟练使用者三款软件办公，甚至可以制作出精美的ppt。感谢信息部的培训，感谢学长学姐的默默的付出和循循善诱教学。当然在信息部里我还学到了PS偷师from-&gt;PS大神学长张，AE视频剪辑偷师from-&gt;大神学长蔡。在这个部门里我想学到技术是一方面，另一方面是从学长学姐的为人处世方面上学习。很感谢他们带给我们的一切一切。顺带一提，大学一定要参加社团活动哦！  </p>
<p><strong><center>大二</center></strong></p>
<p>　　经过了一年的摸爬滚打，对学校逐渐有了一个完整的认知，也开始了对学校周边天地的扩展。哪里食堂好吃，哪家食堂便宜，志愿时怎么来，尔雅通识课怎么刷，等等大学生活的方方面面已经形成了一个脉络在脑海里。这个时候的传记，不再像大一那样呆萌，脱去了小鲜肉的身份，也有人会喊自己一声学长了。这个时候没有了大一那样备受关照的特殊待遇，但却有了独立生活的能力。  </p>
<p>　　很多人会在这个时候选择兼职，勤工俭学。当然我也不例外，考虑到收入，我选择了家教这一兼职。通过学校的校勤工群(学校的资源是真的丰富)，我找到了第一份正式兼职，同时也遇到了生命中很重要的一个人。她很可爱，是我喜欢的类型，也很可惜我们最终没能走到最后。正如相遇时，我说过的，遇到你，我很幸运，曾经如此，现在亦如此。  </p>
<p>　　大二的时光是我大学四年里最美好和难忘的，有一份收入，有一份爱情，有许多小伙伴，去了不少的地方，欣赏了许多美景，体验了到了生活的五味杂陈。当然大二没好好学习哈哈，到现在大四找工作就深有感受了，以及部门选择去留时，自己因为不够自信，选择了离开，这些是大二的小遗憾。  </p>
<p><strong><center>大三</center></strong></p>
<p>　　大三，这个时候我们摇身一变，老咸鱼直接上线。当然老腊肉也是我们的称呼。经过了前两年的大学时光，这个时候我们已经差不多是个成熟的人了。对于一些问题我们要有自己的见解和独立思考的能力。对于我而言大三的学业不是很重，因为大一大二已经把重难点攻克完了，剩下的是一些专业选修课，和一些必修课，相对而言较轻松。这个时候有需要考证的同学会开始准备，我也在大三拿下了高中信息技术教师资格证和英语六级。  </p>
<p>　　在这个时候我们也开始意识到了，学习是自己的事情，在大学没什么会压着你学习，挂科与否也看自己努力。很多选择和决定权都掌握在了自己手上。有一说一，这种感觉让我有些不适应。曾经我们都一样的上小学、初中、高中，很多选择父母会帮你决定好，很多烦恼我们体会不到，除了学习哈哈。我们开始可以选择自己的人生走向，选择学习或当一只快乐的闲鱼划水，这是我们最宝贵的东西，一旦错过不再拥有。  </p>
<p>　　在这个时候我也收获了珍贵的友谊。部门一年的感情，到大三还经常联系的是两位小伙伴，连某和于某。一起去公园散心，一起喝酒，一起打游戏，一起唠嗑。很感谢他们对我的照顾，部门里关系最铁的两位小伙伴。  </p>
<p>　　于某，很会关心人的一个小伙伴，有组织能力，能考虑到他人感受。有蛮多需要从你身上学习的。  </p>
<p>　　连某，平时话不多，喝完酒话就上来的一个人，大一到大三见证了他的成长，越来越善于沟通的一个人，为人很真诚，可靠。  </p>
<p><strong><center>大四</center></strong> </p>
<p>　　大学的生活正式进入尾声，收官之战即将来到。关于大四，要给一个词来形容的话，我会用迷茫来形容。考研，考公，就业。三大方向，任君挑选。此时我心中最多的就是迷茫，对未来的迷茫，对即将毕业的复杂心情。可能也因为我是个目标不明确的人才会有这种想法吧，我对于生活我的要求并非很高，只是简简单单的希望我和身边的人能够开开心心。  </p>
<p>　　大四学业基本结束，老咸鱼们开始会旷些不重要的课程。也逐渐失去了大一大二的好习惯。这是普遍状况。如果你心怀远方的话，建议别跟风，要有自己的作息和态度。大学收官之战则是毕设了，我运气一直都蛮好的，选到了很不错的毕设导师。也顺顺利利的完成答辩。整个毕设大概花了自己一个月的时间去筹备，通过毕设我发现了自己的知识面的狭窄也get很多新技能。一分耕耘一分收获吧。</p>
<p>　　如果你也迷茫，不要担心，相信自己吧。我曾一直执着于迷茫，但我并没找到答案，或许答案在未来的生活中。怀着对未来的憧憬前行吧。  </p>
<p>　　四年舍友，也是难忘的一页，生日，聚餐，旅游，开黑，互怼，互喷。尽管我们各不相同来自异域他乡，但我们陪伴了对方度过了四年的时光，感谢。  </p>
<p>　　舍友中最有趣的就是陈某，宿舍开心果，情商高，人也很高哈哈，脾气很好，讲话幽默，各种外号满天飞，日常被嘲讽。他是我大学里最佩服的人。  </p>
<p>　　班级里也有许多优秀的人，张某，罗某，江某，林某，解某，等等。张某，我们班的心里委员，很会调节气氛，一语惊人，幽默风趣。罗某班级副团支书，组织力一流，很有风格，麦霸。江某代码大佬，很努力的女孩子，很优秀，奖学金拿来多少呀。林某，我的搭档女学委，贴心，细心，对我也蛮照顾的和你做搭档蛮幸运的。解某，山东人，北方壮汉，直来直往，有义气也有毅力，跟着他我接触到了健身。</p>
<h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>　　大学里的故事还很多，纸短情长故事也长。很感谢大学里遇到的所有人。到了大学明白成绩其实并非唯一，而能力的重要性越发明显，而大学又是锻炼能力的好地方。愿你不断前行拥有更多的能力去保护去爱身边的人，愿还没上大学的你能好好努力。愿大学里的你们都拥有美好未来，和开开心心的每一天。愿已经毕业的你能记得大学的时光是我一生宝贵的财富。</p>
<p>　　</p>
<p>　　</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>大学</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建第一个Hexo个人博客</title>
    <url>/2020/01/16/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>hexo是一款快速、简洁且高效的博客框架。<br>可以理解为容易搭建<br>推荐，适合初次搭建博客，网上关于该博客搭建中遇到问题的解决方案很多。</p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul>
<li>操作系统<br>Windows、Linux、macOS皆可</li>
<li>需要安装的软件<br>Git、Node.js、Hexo</li>
</ul>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><p>分享我跟着搭建博客的视频链接<a href="https://www.bilibili.com/video/av44544186?from=search&seid=8333895135889660269" target="_blank" rel="noopener">CodeSheep</a>，很不错的教学，跟着做就行。<br>视频中的up主是macOS系统，但具体和Windows系统差别不大，有问题可以参考弹幕。</p>
<h2 id="个人经验分享"><a href="#个人经验分享" class="headerlink" title="个人经验分享"></a>个人经验分享</h2><p>个人博客的搭建及完善历程如下：<br><strong>1、安装必要软件</strong><br>软件不大、安装也简单<br>花不了多少时间一般10分钟左右<br><strong>2、博客部署到本地</strong><br>成功后博客就算初步搭建完成，但只能本机访问到博客<br>部署顺利的话10分钟左右<br><strong>3、博客部署到github</strong><br>这个是免费的、成功后外网也能访问了<br>部署顺利的话15分钟左右<br><strong>4、博客主题更换及美化</strong><br>主题很多可以网上下载，主题可以参考这个视频链接<a href="https://www.bilibili.com/video/av74851669?from=search&seid=5835927287329667070" target="_blank" rel="noopener">五款主题</a><br>主题的更换以及美化可以花挺多时间的看你想要做到什么程度了<br><strong>5、注册个人域名</strong><br>可以去腾讯云、阿里云购买域名<br><strong>6、个人域名和博客绑定</strong><br>网上也有教学，不难。</p>
]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>序章</title>
    <url>/2020/01/16/%E5%BA%8F%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从0开始搭建博客，到如今着手写第一篇博客，历经了四天的磕磕碰碰。<br>期间出现了不少的问题，深夜探访度娘，浪迹于b站各位大佬的视频。<br>学会了开始去看说明文档，了解了图床、域名等新知识，体验到了拥有博客的小成就感。<br>总的感觉蛮开心的，虽然博客的美化还有不足，自己的文笔也不够优秀，但有了开端，相信以后会越来越好。<br>这篇文章作为第一篇博文，那必须要有其独特之处，一番思考于是决定记录下自己搭建博客的初心、方向、目标。</p>
<h1 id="初心"><a href="#初心" class="headerlink" title="初心"></a>初心</h1><p><strong>分享、学习、成长。</strong>这三个词，是我的搭建博客的初心。<br><strong>分享中提升，学习中成长。</strong>我们无时无刻都在成长的路上，希望我的博客能够伴你我一同成长。</p>
<h1 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h1><p>关于博客以后的写作方向暂定如下：<br>1、技术类（java后端、部分前端、其它奇技淫巧？？）<br>2、随笔类（一些生活中的点点滴滴）<br>3、小白类（一些计算机知识科普）</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>精于心，简于形。<br><img src="https://i.loli.net/2020/01/16/92Z67Tf8YilpOCk.jpg" alt="TIM图片20200116211751.jpg"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>初心</tag>
        <tag>方向</tag>
        <tag>目标</tag>
      </tags>
  </entry>
</search>
